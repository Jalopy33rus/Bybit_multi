#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ultimate_trading_bot.py ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–æ–≤: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π, —Å–∫–∞–ª—å–ø–∏–Ω–≥
"""
import os, sys, time, math, ccxt, pandas as pd, sqlite3
import logging
from datetime import datetime, timedelta
import numpy as np
from typing import Dict, List, Optional, Tuple, Any

from ta.trend import EMAIndicator, MACD, ADXIndicator, IchimokuIndicator
from ta.momentum import RSIIndicator, StochasticOscillator, WilliamsRIndicator
from ta.volatility import BollingerBands, AverageTrueRange
from ta.volume import VolumeWeightedAveragePrice, OnBalanceVolumeIndicator
from telegram import Bot, ParseMode, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

# ====== CONFIGURATION ======
API_KEY = os.getenv("BYBIT_API_KEY", "BYBIT_API_KEY")
API_SECRET = os.getenv("BYBIT_API_SECRET", "BYBIT_API_SECRET")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "TELEGRAM_TOKEN")
CHAT_ID = CHAT_ID

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
SYMBOLS = [
    "BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT", "XRP/USDT",
    "ADA/USDT", "AVAX/USDT", "DOT/USDT", "LINK/USDT", "MATIC/USDT",
    "DOGE/USDT", "LTC/USDT", "ATOM/USDT", "UNI/USDT", "XLM/USDT",
    "ETC/USDT", "FIL/USDT", "THETA/USDT", "EOS/USDT", "AAVE/USDT"
]

# ====== TRADING MODES ======
TRADING_MODES = {
    "AGGRESSIVE": {
        "name": "üü¢ –ê–ì–†–ï–°–°–ò–í–ù–´–ô",
        "type": "swing",
        "scan_interval": 30,
        "status_interval": 300,
        "max_trades": 8,
        "trade_pct": 0.08,
        "rsi_min": 35,
        "rsi_max": 75,
        "volume_multiplier": 1.2,
        "adx_min": 12,
        "min_score": 40,
        "cooldown": 2 * 60,
        "max_stop_loss": 0.008,
        "take_profit": 0.012,
        "trailing_start": 0.004,
        "trailing_step": 0.002,
        "max_daily_trades_per_symbol": 3
    },
    "CONSERVATIVE": {
        "name": "üü° –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô", 
        "type": "swing",
        "scan_interval": 60,
        "status_interval": 600,
        "max_trades": 4,
        "trade_pct": 0.10,
        "rsi_min": 40,
        "rsi_max": 65,
        "volume_multiplier": 1.3,
        "adx_min": 15,
        "min_score": 55,
        "cooldown": 10 * 60,
        "max_stop_loss": 0.015,
        "take_profit": 0.030,
        "trailing_start": 0.015,
        "trailing_step": 0.005,
        "max_daily_trades_per_symbol": 2
    },
    "SCALPING": {
        "name": "üî¥ –°–ö–ê–õ–¨–ü–ò–ù–ì",
        "type": "scalping",
        "scan_interval": 5,
        "status_interval": 180,
        "max_trades": 12,
        "trade_pct": 0.15,
        "active_strategy": "BB_SQUEEZE"
    }
}

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
SCALPING_STRATEGIES = {
    "BB_SQUEEZE": {
        "name": "Bollinger Squeeze",
        "scan_interval": 3,
        "max_trades": 15,
        "trade_pct": 0.12,
        "timeframe_entry": "1m",
        "timeframe_trend": "5m",
        "max_stop_loss": 0.002,
        "take_profit": 0.004,
        "quick_exit": 0.003,
        "rsi_range": (25, 75),
        "volume_multiplier": 1.3,
        "bb_period": 10,
        "bb_std": 1.2,
        # –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        "trailing_start": 0.002,
        "trailing_step": 0.001,
        "status_interval": 180
    },
    "EMA_MOMENTUM": {
        "name": "EMA Momentum",
        "scan_interval": 5,
        "max_trades": 12,
        "trade_pct": 0.15,
        "timeframe_entry": "2m",
        "timeframe_trend": "10m",
        "max_stop_loss": 0.0025,
        "take_profit": 0.005,
        "quick_exit": 0.004,
        "rsi_range": (30, 70),
        "volume_multiplier": 1.2,
        "ema_fast": 5,
        "ema_slow": 12,
        "trailing_start": 0.002,
        "trailing_step": 0.001,
        "status_interval": 180
    },
    "VWAP_BOUNCE": {
        "name": "VWAP Bounce",
        "scan_interval": 4,
        "max_trades": 10,
        "trade_pct": 0.18,
        "timeframe_entry": "3m",
        "timeframe_trend": "15m",
        "max_stop_loss": 0.0015,
        "take_profit": 0.0035,
        "quick_exit": 0.0025,
        "rsi_range": (35, 65),
        "volume_multiplier": 1.8,
        "vwap_period": 20,
        "trailing_start": 0.002,
        "trailing_step": 0.001,
        "status_interval": 180
    },
    "BREAKOUT": {
        "name": "Breakout Scalping",
        "scan_interval": 5,
        "max_trades": 8,
        "trade_pct": 0.20,
        "timeframe_entry": "2m",
        "timeframe_trend": "10m",
        "max_stop_loss": 0.003,
        "take_profit": 0.006,
        "quick_exit": 0.004,
        "rsi_range": (40, 80),
        "volume_multiplier": 2.0,
        "breakout_period": 15,
        "trailing_start": 0.002,
        "trailing_step": 0.001,
        "status_interval": 180
    }
}

# –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CURRENT_MODE = "CONSERVATIVE"
CURRENT_SCALPING_STRATEGY = "BB_SQUEEZE"

# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
SCALPING_GLOBAL = {
    "cooldown": 15,
    "max_daily_trades_per_symbol": 25,
    "time_in_trade": 180,
    "max_consecutive_losses": 3,
    "profit_target_daily": 0.05,
    "loss_limit_daily": -0.02,
}

# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MIN_TRADE_USDT = 10.0
MIN_USDT_PER_SYMBOL = {
    "BTC/USDT": 5.0, "ETH/USDT": 5.0, "BNB/USDT": 3.0, "SOL/USDT": 2.0,
    "XRP/USDT": 2.0, "ADA/USDT": 2.0, "AVAX/USDT": 2.0, "DOT/USDT": 2.0,
    "LINK/USDT": 2.0, "MATIC/USDT": 2.0, "DOGE/USDT": 2.0, "LTC/USDT": 2.0,
    "ATOM/USDT": 2.0, "UNI/USDT": 2.0, "XLM/USDT": 2.0, "ETC/USDT": 2.0,
    "FIL/USDT": 2.0, "THETA/USDT": 2.0, "EOS/USDT": 2.0, "AAVE/USDT": 5.0,
}

TAKER_FEE = 0.001
ROUNDTRIP_FEE = TAKER_FEE * 2

LOCK_FILE = "/tmp/ultimate_trading_bot.lock"
DB_FILE = "trades_ultimate.db"

DRY_RUN = False

# ====== LOGGING ======
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ultimate_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ====== INITIALIZATION ======
def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS positions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        symbol TEXT,
        trading_mode TEXT,
        strategy TEXT,
        base_amount REAL,
        open_price REAL,
        stop_loss REAL,
        take_profit REAL,
        max_price REAL DEFAULT 0,
        open_time TEXT,
        close_time TEXT,
        close_price REAL,
        pnl REAL DEFAULT 0,
        pnl_percent REAL DEFAULT 0,
        status TEXT DEFAULT 'OPEN',
        fee_paid REAL DEFAULT 0,
        entry_reason TEXT,
        exit_reason TEXT,
        duration_seconds INTEGER DEFAULT 0
    )
    """)
    
    # –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS trade_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        symbol TEXT,
        action TEXT,
        price REAL,
        usdt_amount REAL,
        base_amount REAL,
        fee REAL DEFAULT 0,
        time TEXT,
        timestamp INTEGER,
        trading_mode TEXT,
        strategy TEXT
    )
    """)
    
    # –ö—É–¥–æ—É–Ω—ã –∏ –ª–∏–º–∏—Ç—ã
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS symbol_cooldown (
        symbol TEXT PRIMARY KEY,
        last_closed_ts INTEGER DEFAULT 0,
        daily_trade_count INTEGER DEFAULT 0,
        last_trade_date TEXT
    )
    """)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS performance_stats (
        date TEXT PRIMARY KEY,
        total_trades INTEGER DEFAULT 0,
        winning_trades INTEGER DEFAULT 0,
        total_pnl REAL DEFAULT 0,
        total_volume REAL DEFAULT 0
    )
    """)
    
    # –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS daily_limits (
        date TEXT PRIMARY KEY,
        daily_pnl REAL DEFAULT 0,
        total_trades INTEGER DEFAULT 0,
        consecutive_losses INTEGER DEFAULT 0
    )
    """)
    
    conn.commit()
    return conn, cursor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
conn, cursor = initialize_database()

if os.path.exists(LOCK_FILE):
    logger.error("Lock file exists ‚Äî bot already running. Exit.")
    sys.exit(1)
open(LOCK_FILE, "w").close()

try:
    exchange = ccxt.bybit({
        "apiKey": API_KEY,
        "secret": API_SECRET,
        "enableRateLimit": True,
        "options": {"defaultType": "spot"},
        "timeout": 30000,
    })
    exchange.fetch_balance()
    logger.info("Exchange connection successful")
except Exception as e:
    logger.error(f"Exchange connection failed: {e}")
    sys.exit(1)

bot = Bot(token=TELEGRAM_TOKEN)

# ====== KEYBOARDS ======
def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üü¢ –ê–ì–†–ï–°–°–ò–í–ù–´–ô"), KeyboardButton("üü° –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô")],
        [KeyboardButton("üî¥ –°–ö–ê–õ–¨–ü–ò–ù–ì"), KeyboardButton("üìä –°–¢–ê–¢–£–°")],
        [KeyboardButton("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò"), KeyboardButton("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_scalping_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    keyboard = [
        [KeyboardButton("üéØ BB Squeeze"), KeyboardButton("üöÄ EMA Momentum")],
        [KeyboardButton("üìä VWAP Bounce"), KeyboardButton("üí• Breakout")],
        [KeyboardButton("üîô –ù–ê–ó–ê–î")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = [
        [KeyboardButton("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø"), KeyboardButton("üì• –ò–ú–ü–û–†–¢")],
        [KeyboardButton("üîß –î–ï–ë–ê–ì"), KeyboardButton("üîô –ù–ê–ó–ê–î")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ====== CORE FUNCTIONS ======
def safe_send(text: str, max_retries: int = 3) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    for attempt in range(max_retries):
        try:
            bot.send_message(chat_id=CHAT_ID, text=text, parse_mode=ParseMode.HTML)
            return True
        except Exception as e:
            logger.warning(f"Telegram send attempt {attempt + 1} failed: {e}")
            if attempt == max_retries - 1:
                logger.error(f"Failed to send Telegram message: {e}")
            time.sleep(2)
    return False

def retry_api_call(func, max_retries: int = 3, delay: float = 1.0):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ API"""
    for attempt in range(max_retries):
        try:
            return func()
        except ccxt.NetworkError as e:
            if attempt == max_retries - 1:
                logger.error(f"Network error after {max_retries} attempts: {e}")
                raise e
            sleep_time = delay * (2 ** attempt) + np.random.uniform(0, 1)
            logger.warning(f"Network error, retrying in {sleep_time:.2f}s: {e}")
            time.sleep(sleep_time)
        except ccxt.ExchangeError as e:
            logger.error(f"Exchange error: {e}")
            raise e
        except Exception as e:
            if attempt == max_retries - 1:
                logger.error(f"API error after {max_retries} attempts: {e}")
                raise e
            time.sleep(delay * (2 ** attempt))

def fetch_ohlcv(symbol: str, timeframe: str, limit: int = 100) -> List[List]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö"""
    def _fetch():
        return exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    
    try:
        data = retry_api_call(_fetch, max_retries=2)
        if not data or len(data) < 20:
            logger.debug(f"Insufficient OHLCV data for {symbol}: {len(data) if data else 0} candles")
            return []
        return data
    except Exception as e:
        logger.warning(f"Failed to fetch OHLCV for {symbol}: {e}")
        return []

def fetch_balance() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    def _fetch():
        return exchange.fetch_balance()
    try:
        return retry_api_call(_fetch)
    except Exception as e:
        logger.error(f"Failed to fetch balance: {e}")
        return {'free': {'USDT': 0.0}, 'total': {'USDT': 0.0}, 'used': {'USDT': 0.0}}

def get_current_settings() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if CURRENT_MODE == "SCALPING":
        return SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
    else:
        return TRADING_MODES[CURRENT_MODE]

def round_amount(symbol: str, amount: float) -> float:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        market = exchange.markets.get(symbol)
        if not market:
            return float(amount)
            
        limits = market.get('limits', {})
        amount_limits = limits.get('amount', {})
        min_amount = amount_limits.get('min', 0.000001)
        step = amount_limits.get('step', min_amount)
        
        if step <= 0:
            return max(float(amount), min_amount)
            
        if step < 1:
            precision = int(round(-math.log10(step)))
            rounded = math.floor(amount / step) * step
            rounded = round(rounded, precision)
        else:
            rounded = math.floor(amount / step) * step
            
        return max(float(rounded), min_amount)
        
    except Exception as e:
        logger.error(f"Error rounding amount for {symbol}: {e}")
        return float(amount)

def get_min_amount(symbol: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        market = exchange.markets.get(symbol)
        if market:
            return float(market.get('limits', {}).get('amount', {}).get('min', 0.000001))
    except Exception as e:
        logger.error(f"Error getting min amount for {symbol}: {e}")
    return 0.000001

def check_min_order_value(symbol: str, usdt_amount: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞"""
    min_value = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
    if usdt_amount < min_value:
        logger.debug(f"Order value {usdt_amount:.2f} below minimum {min_value:.2f} for {symbol}")
        return False
    return True

# ====== SWING TRADING LOGIC ======
def get_trend_direction(df: pd.DataFrame) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
    if df is None or len(df) < 50:
        return "SIDEWAYS"
    
    try:
        ema_fast = EMAIndicator(df['close'], window=9).ema_indicator()
        ema_slow = EMAIndicator(df['close'], window=21).ema_indicator()
        ema_trend = EMAIndicator(df['close'], window=50).ema_indicator()
        
        if len(ema_fast) < 5 or len(ema_slow) < 5 or len(ema_trend) < 5:
            return "SIDEWAYS"
            
        price = df['close'].iloc[-1]
        fast_ema = ema_fast.iloc[-1]
        slow_ema = ema_slow.iloc[-1]
        trend_ema = ema_trend.iloc[-1]
        
        ema_alignment = (price > fast_ema > slow_ema > trend_ema) or (price < fast_ema < slow_ema < trend_ema)
        ema_slope = (ema_fast.iloc[-1] - ema_fast.iloc[-5]) / ema_fast.iloc[-5] if ema_fast.iloc[-5] != 0 else 0
        
        if ema_alignment and abs(ema_slope) > 0.001:
            if price > fast_ema and ema_slope > 0:
                return "BULLISH"
            elif price < fast_ema and ema_slope < 0:
                return "BEARISH"
        
        return "SIDEWAYS"
        
    except Exception as e:
        logger.error(f"Error calculating trend direction: {e}")
        return "SIDEWAYS"

def calculate_swing_signals(df: pd.DataFrame) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
    settings = get_current_settings()
    
    if df is None or len(df) < 30:
        return {'score': 0, 'error': 'Insufficient data'}
    
    try:
        current_price = df['close'].iloc[-1]
        current_volume = df['volume'].iloc[-1]
        volume_sma = df['volume'].tail(20).mean()
        
        # RSI
        rsi = RSIIndicator(df['close'], window=14).rsi().iloc[-1]
        rsi_prev = RSIIndicator(df['close'], window=14).rsi().iloc[-2] if len(df) > 1 else rsi
        
        # MACD
        macd_line = MACD(df['close']).macd().iloc[-1]
        macd_signal = MACD(df['close']).macd_signal().iloc[-1]
        macd_bullish = macd_line > macd_signal
        
        # ADX
        adx = 0
        adx_bullish = False
        if len(df) >= 15:
            try:
                adx_indicator = ADXIndicator(df['high'], df['low'], df['close'], window=14)
                adx = adx_indicator.adx().iloc[-1]
                plus_di = adx_indicator.adx_pos().iloc[-1]
                minus_di = adx_indicator.adx_neg().iloc[-1]
                adx_bullish = plus_di > minus_di
            except Exception as e:
                logger.warning(f"ADX calculation error: {e}")
        
        # Bollinger Bands
        bb = BollingerBands(df['close'], window=20, window_dev=2)
        bb_upper = bb.bollinger_hband().iloc[-1]
        bb_lower = bb.bollinger_lband().iloc[-1]
        bb_position = (current_price - bb_lower) / (bb_upper - bb_lower) if bb_upper != bb_lower else 0.5
        
        # Stochastic
        stoch = StochasticOscillator(df['high'], df['low'], df['close'], window=14, smooth_window=3).stoch().iloc[-1]
        
        # Volume analysis
        volume_ratio = current_volume / volume_sma if volume_sma > 0 else 1
        volume_ok = volume_ratio > settings['volume_multiplier']
        
        signals = {
            'price': current_price,
            'volume_ok': volume_ok,
            'volume_ratio': volume_ratio,
            'rsi_ok': settings['rsi_min'] <= rsi <= settings['rsi_max'],
            'rsi_value': rsi,
            'rsi_trend': 'BULLISH' if rsi > rsi_prev else 'BEARISH',
            'macd_bullish': macd_bullish,
            'adx_strong': adx >= settings['adx_min'],
            'adx_value': adx,
            'adx_bullish': adx_bullish,
            'bb_position': bb_position,
            'bb_signal': 0.2 <= bb_position <= 0.8,
            'stoch_ok': 20 <= stoch <= 80,
            'stoch_value': stoch,
            'trend': get_trend_direction(df)
        }
        
        # Score calculation
        score = 0
        if signals['volume_ok']: score += 20
        if signals['rsi_ok']: score += 15
        if signals['rsi_trend'] == 'BULLISH': score += 5
        if signals['macd_bullish']: score += 15
        if signals['adx_strong']: score += 10
        if signals['adx_bullish']: score += 5
        if signals['bb_signal']: score += 15
        if signals['stoch_ok']: score += 10
        if signals['trend'] == "BULLISH": score += 5
        
        signals['score'] = min(score, 100)
        return signals
        
    except Exception as e:
        logger.error(f"Error calculating swing signals: {e}")
        return {'score': 0, 'error': str(e)}

def should_enter_swing_position(symbol: str) -> Tuple[bool, Any]:
    """–õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
    try:
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        df_trend = get_ohlcv_data(symbol, "1h", 100)
        if df_trend is None or len(df_trend) < 50:
            return False, "No trend data"
            
        trend = get_trend_direction(df_trend)
        if trend != "BULLISH":
            return False, f"Trend not bullish: {trend}"
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–∞
        df_entry = get_ohlcv_data(symbol, "15m", 100)
        if df_entry is None or len(df_entry) < 30:
            return False, "No entry data"
            
        signals = calculate_swing_signals(df_entry)
        settings = get_current_settings()
        
        if 'error' in signals:
            return False, f"Signal error: {signals['error']}"
        
        # –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
        entry_conditions = (
            signals['score'] >= settings['min_score'],
            signals['volume_ok'],
            signals['trend'] == "BULLISH",
            signals.get('adx_strong', False),
            not is_in_cooldown(symbol),
            check_daily_trade_limit(symbol)
        )
        
        if all(entry_conditions):
            sl_price = signals['price'] * (1 - settings['max_stop_loss'])
            tp_price = signals['price'] * (1 + settings['take_profit'])
            
            entry_info = {
                'price': signals['price'],
                'stop_loss': sl_price,
                'take_profit': tp_price,
                'score': signals['score'],
                'rsi': signals['rsi_value'],
                'adx': signals['adx_value'],
                'volume_ratio': signals.get('volume_ratio', 1)
            }
            
            return True, entry_info
        else:
            reason = f"Score: {signals['score']}, Volume: {signals['volume_ok']}, Trend: {signals['trend']}, ADX: {signals.get('adx_strong', False)}"
            return False, reason
            
    except Exception as e:
        logger.error(f"Swing entry check error {symbol}: {e}")
        return False, f"Error: {str(e)}"

# ====== SCALPING STRATEGIES ======
def bollinger_squeeze_strategy(df: pd.DataFrame, symbol: str) -> Dict[str, Any]:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è Bollinger Band Squeeze"""
    strategy_config = SCALPING_STRATEGIES["BB_SQUEEZE"]
    
    if len(df) < 20:
        return {'signal': 'NO_SIGNAL', 'score': 0}
    
    try:
        bb = BollingerBands(df['close'], window=strategy_config['bb_period'], 
                           window_dev=strategy_config['bb_std'])
        
        bb_upper = bb.bollinger_hband().iloc[-1]
        bb_lower = bb.bollinger_lband().iloc[-1]
        bb_middle = bb.bollinger_mavg().iloc[-1]
        
        bb_width = (bb_upper - bb_lower) / bb_middle
        rsi = RSIIndicator(df['close'], window=7).rsi().iloc[-1]
        
        current_volume = df['volume'].iloc[-1]
        avg_volume = df['volume'].tail(10).mean()
        volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1
        
        price_position = (df['close'].iloc[-1] - bb_lower) / (bb_upper - bb_lower)
        
        long_conditions = (
            bb_width < 0.01,
            rsi < strategy_config['rsi_range'][1],
            volume_ratio > strategy_config['volume_multiplier'],
            price_position < 0.7,
            df['close'].iloc[-1] > bb_middle
        )
        
        short_conditions = (
            bb_width < 0.01,
            rsi > strategy_config['rsi_range'][0],
            volume_ratio > strategy_config['volume_multiplier'],
            price_position > 0.3,
            df['close'].iloc[-1] < bb_middle
        )
        
        if all(long_conditions):
            score = min(70 + (volume_ratio * 10) + ((0.01 - bb_width) * 1000), 95)
            return {
                'signal': 'LONG',
                'score': score,
                'price': df['close'].iloc[-1],
                'stop_loss': df['close'].iloc[-1] * (1 - strategy_config['max_stop_loss']),
                'take_profit': df['close'].iloc[-1] * (1 + strategy_config['take_profit']),
                'rsi': rsi,
                'volume_ratio': volume_ratio,
                'bb_width': bb_width
            }
        elif all(short_conditions):
            score = min(70 + (volume_ratio * 10) + ((0.01 - bb_width) * 1000), 95)
            return {
                'signal': 'SHORT', 
                'score': score,
                'price': df['close'].iloc[-1],
                'stop_loss': df['close'].iloc[-1] * (1 + strategy_config['max_stop_loss']),
                'take_profit': df['close'].iloc[-1] * (1 - strategy_config['take_profit']),
                'rsi': rsi,
                'volume_ratio': volume_ratio,
                'bb_width': bb_width
            }
        
        return {'signal': 'NO_SIGNAL', 'score': 0}
        
    except Exception as e:
        logger.error(f"BB Squeeze error for {symbol}: {e}")
        return {'signal': 'NO_SIGNAL', 'score': 0}

def ema_momentum_strategy(df: pd.DataFrame, symbol: str) -> Dict[str, Any]:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è EMA Momentum"""
    strategy_config = SCALPING_STRATEGIES["EMA_MOMENTUM"]
    
    if len(df) < 15:
        return {'signal': 'NO_SIGNAL', 'score': 0}
    
    try:
        ema_fast = EMAIndicator(df['close'], window=strategy_config['ema_fast']).ema_indicator()
        ema_slow = EMAIndicator(df['close'], window=strategy_config['ema_slow']).ema_indicator()
        
        rsi = RSIIndicator(df['close'], window=7).rsi().iloc[-1]
        
        current_volume = df['volume'].iloc[-1]
        avg_volume = df['volume'].tail(10).mean()
        volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1
        
        macd_line = MACD(df['close']).macd().iloc[-1]
        macd_signal = MACD(df['close']).macd_signal().iloc[-1]
        
        long_conditions = (
            ema_fast.iloc[-1] > ema_slow.iloc[-1],
            ema_fast.iloc[-2] <= ema_slow.iloc[-2],
            rsi < strategy_config['rsi_range'][1],
            volume_ratio > strategy_config['volume_multiplier'],
            macd_line > macd_signal,
            df['close'].iloc[-1] > ema_fast.iloc[-1]
        )
        
        short_conditions = (
            ema_fast.iloc[-1] < ema_slow.iloc[-1],
            ema_fast.iloc[-2] >= ema_slow.iloc[-2],
            rsi > strategy_config['rsi_range'][0],
            volume_ratio > strategy_config['volume_multiplier'], 
            macd_line < macd_signal,
            df['close'].iloc[-1] < ema_fast.iloc[-1]
        )
        
        if all(long_conditions):
            score = min(75 + (volume_ratio * 8) + (max(0, macd_line - macd_signal) * 100), 92)
            return {
                'signal': 'LONG',
                'score': score,
                'price': df['close'].iloc[-1],
                'stop_loss': df['close'].iloc[-1] * (1 - strategy_config['max_stop_loss']),
                'take_profit': df['close'].iloc[-1] * (1 + strategy_config['take_profit']),
                'rsi': rsi,
                'volume_ratio': volume_ratio
            }
        elif all(short_conditions):
            score = min(75 + (volume_ratio * 8) + (max(0, macd_signal - macd_line) * 100), 92)
            return {
                'signal': 'SHORT',
                'score': score,
                'price': df['close'].iloc[-1],
                'stop_loss': df['close'].iloc[-1] * (1 + strategy_config['max_stop_loss']),
                'take_profit': df['close'].iloc[-1] * (1 - strategy_config['take_profit']),
                'rsi': rsi, 
                'volume_ratio': volume_ratio
            }
        
        return {'signal': 'NO_SIGNAL', 'score': 0}
        
    except Exception as e:
        logger.error(f"EMA Momentum error for {symbol}: {e}")
        return {'signal': 'NO_SIGNAL', 'score': 0}

def vwap_bounce_strategy(df: pd.DataFrame, symbol: str) -> Dict[str, Any]:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è VWAP Bounce"""
    strategy_config = SCALPING_STRATEGIES["VWAP_BOUNCE"]
    
    if len(df) < strategy_config['vwap_period'] + 5:
        return {'signal': 'NO_SIGNAL', 'score': 0}
    
    try:
        vwap = VolumeWeightedAveragePrice(
            high=df['high'],
            low=df['low'], 
            close=df['close'],
            volume=df['volume'],
            window=strategy_config['vwap_period']
        ).volume_weighted_average_price().iloc[-1]
        
        current_price = df['close'].iloc[-1]
        price_distance = abs(current_price - vwap) / vwap
        
        rsi = RSIIndicator(df['close'], window=7).rsi().iloc[-1]
        
        current_volume = df['volume'].iloc[-1]
        avg_volume = df['volume'].tail(10).mean()
        volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1
        
        long_conditions = (
            current_price > vwap,
            df['close'].iloc[-2] <= vwap,
            price_distance < 0.005,
            rsi < strategy_config['rsi_range'][1],
            volume_ratio > strategy_config['volume_multiplier'],
            df['volume'].iloc[-1] > df['volume'].iloc[-2]
        )
        
        short_conditions = (
            current_price < vwap,
            df['close'].iloc[-2] >= vwap,
            price_distance < 0.005,
            rsi > strategy_config['rsi_range'][0],
            volume_ratio > strategy_config['volume_multiplier'],
            df['volume'].iloc[-1] > df['volume'].iloc[-2]
        )
        
        if all(long_conditions):
            score = min(80 + (volume_ratio * 6) + ((0.005 - price_distance) * 1000), 94)
            return {
                'signal': 'LONG',
                'score': score,
                'price': current_price,
                'stop_loss': vwap * (1 - strategy_config['max_stop_loss'] * 1.5),
                'take_profit': current_price * (1 + strategy_config['take_profit']),
                'rsi': rsi,
                'volume_ratio': volume_ratio,
                'vwap_distance': price_distance
            }
        elif all(short_conditions):
            score = min(80 + (volume_ratio * 6) + ((0.005 - price_distance) * 1000), 94)
            return {
                'signal': 'SHORT',
                'score': score,
                'price': current_price,
                'stop_loss': vwap * (1 + strategy_config['max_stop_loss'] * 1.5),
                'take_profit': current_price * (1 - strategy_config['take_profit']),
                'rsi': rsi,
                'volume_ratio': volume_ratio,
                'vwap_distance': price_distance
            }
        
        return {'signal': 'NO_SIGNAL', 'score': 0}
        
    except Exception as e:
        logger.error(f"VWAP Bounce error for {symbol}: {e}")
        return {'signal': 'NO_SIGNAL', 'score': 0}

def breakout_strategy(df: pd.DataFrame, symbol: str) -> Dict[str, Any]:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è Breakout"""
    strategy_config = SCALPING_STRATEGIES["BREAKOUT"]
    
    period = strategy_config['breakout_period']
    if len(df) < period + 5:
        return {'signal': 'NO_SIGNAL', 'score': 0}
    
    try:
        resistance = df['high'].tail(period).max()
        support = df['low'].tail(period).min()
        
        current_high = df['high'].iloc[-1]
        current_low = df['low'].iloc[-1]
        current_close = df['close'].iloc[-1]
        
        rsi = RSIIndicator(df['close'], window=7).rsi().iloc[-1]
        
        current_volume = df['volume'].iloc[-1]
        avg_volume = df['volume'].tail(10).mean()
        volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1
        
        long_conditions = (
            current_high > resistance,
            current_close > resistance,
            volume_ratio > strategy_config['volume_multiplier'],
            rsi < strategy_config['rsi_range'][1],
            df['volume'].iloc[-1] > df['volume'].iloc[-2]
        )
        
        short_conditions = (
            current_low < support,
            current_close < support,
            volume_ratio > strategy_config['volume_multiplier'],
            rsi > strategy_config['rsi_range'][0],
            df['volume'].iloc[-1] > df['volume'].iloc[-2]
        )
        
        if all(long_conditions):
            score = min(85 + (volume_ratio * 5), 96)
            return {
                'signal': 'LONG',
                'score': score,
                'price': current_close,
                'stop_loss': resistance * (1 - strategy_config['max_stop_loss']),
                'take_profit': current_close * (1 + strategy_config['take_profit']),
                'rsi': rsi,
                'volume_ratio': volume_ratio
            }
        elif all(short_conditions):
            score = min(85 + (volume_ratio * 5), 96)
            return {
                'signal': 'SHORT', 
                'score': score,
                'price': current_close,
                'stop_loss': support * (1 + strategy_config['max_stop_loss']),
                'take_profit': current_close * (1 - strategy_config['take_profit']),
                'rsi': rsi,
                'volume_ratio': volume_ratio
            }
        
        return {'signal': 'NO_SIGNAL', 'score': 0}
        
    except Exception as e:
        logger.error(f"Breakout error for {symbol}: {e}")
        return {'signal': 'NO_SIGNAL', 'score': 0}

def get_scalping_signal(symbol: str) -> Tuple[bool, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    try:
        strategy_config = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
        
        df_entry = get_ohlcv_data(symbol, strategy_config['timeframe_entry'], 50)
        if df_entry is None or len(df_entry) < 20:
            return False, "No entry data"
        
        # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if CURRENT_SCALPING_STRATEGY == "BB_SQUEEZE":
            result = bollinger_squeeze_strategy(df_entry, symbol)
        elif CURRENT_SCALPING_STRATEGY == "EMA_MOMENTUM":
            result = ema_momentum_strategy(df_entry, symbol)
        elif CURRENT_SCALPING_STRATEGY == "VWAP_BOUNCE":
            result = vwap_bounce_strategy(df_entry, symbol)
        elif CURRENT_SCALPING_STRATEGY == "BREAKOUT":
            result = breakout_strategy(df_entry, symbol)
        else:
            return False, "Unknown strategy"
        
        if result['signal'] != 'NO_SIGNAL' and result['score'] >= 70:
            if not check_scalping_daily_limits():
                return False, "Daily limits reached"
            
            return True, {
                'signal': result['signal'],
                'price': result['price'],
                'stop_loss': result['stop_loss'],
                'take_profit': result['take_profit'],
                'score': result['score'],
                'strategy': CURRENT_SCALPING_STRATEGY,
                'rsi': result.get('rsi', 0),
                'volume_ratio': result.get('volume_ratio', 1)
            }
        
        return False, f"No signal: {result.get('signal', 'UNKNOWN')}, Score: {result.get('score', 0)}"
        
    except Exception as e:
        logger.error(f"Scalping signal error for {symbol}: {e}")
        return False, f"Error: {str(e)}"

def check_scalping_daily_limits() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    today = datetime.now().strftime('%Y-%m-%d')
    
    cursor.execute("SELECT daily_pnl, total_trades, consecutive_losses FROM daily_limits WHERE date=?", (today,))
    row = cursor.fetchone()
    
    if not row:
        cursor.execute("INSERT INTO daily_limits (date, daily_pnl, total_trades, consecutive_losses) VALUES (?, 0, 0, 0)", (today,))
        conn.commit()
        return True
    
    daily_pnl, total_trades, consecutive_losses = row
    
    if daily_pnl >= SCALPING_GLOBAL['profit_target_daily']:
        logger.info(f"Daily profit target reached: {daily_pnl:.2%}")
        return False
    
    if daily_pnl <= SCALPING_GLOBAL['loss_limit_daily']:
        logger.info(f"Daily loss limit reached: {daily_pnl:.2%}")
        return False
    
    if consecutive_losses >= SCALPING_GLOBAL['max_consecutive_losses']:
        logger.info(f"Max consecutive losses reached: {consecutive_losses}")
        return False
    
    return True

def update_scalping_daily_pnl(pnl_percent: float):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ PnL –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    today = datetime.now().strftime('%Y-%m-%d')
    
    cursor.execute("SELECT daily_pnl, consecutive_losses FROM daily_limits WHERE date=?", (today,))
    row = cursor.fetchone()
    
    if row:
        current_pnl, current_losses = row
        new_pnl = current_pnl + pnl_percent
        
        if pnl_percent > 0:
            cursor.execute("UPDATE daily_limits SET daily_pnl=?, consecutive_losses=0 WHERE date=?", (new_pnl, today))
        else:
            new_losses = current_losses + 1
            cursor.execute("UPDATE daily_limits SET daily_pnl=?, consecutive_losses=? WHERE date=?", (new_pnl, new_losses, today))
        
        conn.commit()

# ====== POSITION MANAGEMENT ======
def get_ohlcv_data(symbol: str, timeframe: str, limit: int) -> Optional[pd.DataFrame]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö"""
    ohlcv = fetch_ohlcv(symbol, timeframe, limit)
    if not ohlcv or len(ohlcv) < 20:
        return None
        
    try:
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        return df.astype({'open': float, 'high': float, 'low': float, 'close': float, 'volume': float})
    except Exception as e:
        logger.error(f"Error processing OHLCV data for {symbol}: {e}")
        return None

def get_open_positions() -> Dict[str, Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        cursor.execute("SELECT symbol, base_amount, open_price, stop_loss, take_profit, max_price, trading_mode FROM positions WHERE status='OPEN'")
        rows = cursor.fetchall()
        
        positions = {}
        for row in rows:
            symbol = row[0]
            positions[symbol] = {
                "base_amount": row[1], 
                "open_price": row[2], 
                "stop_loss": row[3],
                "take_profit": row[4],
                "max_price": row[5] or row[2],
                "trading_mode": row[6]
            }
        
        return positions
        
    except Exception as e:
        logger.error(f"Error getting open positions: {e}")
        return {}

def record_open_position(symbol: str, base_amount: float, open_price: float, stop_loss: float, take_profit: float, strategy: str = ""):
    """–ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        usdt_amount = base_amount * open_price
        fee = usdt_amount * TAKER_FEE
        
        cursor.execute("""
            INSERT INTO positions (symbol, trading_mode, strategy, base_amount, open_price, stop_loss, take_profit, max_price, open_time, fee_paid) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), ?)
        """, (symbol, CURRENT_MODE, strategy, base_amount, open_price, stop_loss, take_profit, open_price, fee))
        
        cursor.execute("""
            INSERT INTO trade_history (symbol, action, price, usdt_amount, base_amount, fee, time, timestamp, trading_mode, strategy) 
            VALUES (?, 'BUY', ?, ?, ?, ?, datetime('now'), ?, ?, ?)
        """, (symbol, open_price, usdt_amount, base_amount, fee, int(time.time()), CURRENT_MODE, strategy))
        
        conn.commit()
        logger.info(f"Recorded open position for {symbol}: {base_amount:.6f} @ {open_price:.6f}")
    except Exception as e:
        logger.error(f"Error recording open position: {e}")
        conn.rollback()

def safe_close_position(symbol: str, reason: str = "") -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        if DRY_RUN:
            logger.info(f"DRY RUN: Would close {symbol} - {reason}")
            mark_position_closed(symbol)
            return True

        bal = fetch_balance()
        base = symbol.split("/")[0]
        real_balance = float(bal['free'].get(base, 0) or 0)
        
        if real_balance <= 0:
            logger.info(f"No balance for {symbol}, marking as closed")
            mark_position_closed(symbol)
            return True

        try:
            ticker = exchange.fetch_ticker(symbol)
            current_price = float(ticker['last'])
        except Exception as e:
            logger.error(f"Failed to get price for {symbol}: {e}")
            return False

        amount_to_sell = round_amount(symbol, real_balance)
        min_amount = get_min_amount(symbol)
        
        if amount_to_sell < min_amount:
            logger.info(f"Amount too small for {symbol}: {amount_to_sell} < {min_amount}")
            mark_position_closed(symbol)
            return True

        order_value = amount_to_sell * current_price
        min_order_value = 2.0
        
        if order_value < min_order_value:
            logger.info(f"Order value too small for {symbol}: {order_value:.2f} USDT")
            mark_position_closed(symbol)
            return True

        if not check_min_order_value(symbol, order_value):
            logger.warning(f"Below exchange limit for {symbol}: {order_value:.2f} USDT")
            mark_position_closed(symbol)
            return True

        # Execute sell order
        try:
            order = exchange.create_market_order(symbol, 'sell', amount_to_sell)
            
            actual_amount = amount_to_sell
            actual_price = current_price
            
            if order and 'filled' in order and order['filled'] is not None:
                actual_amount = float(order['filled'])
            if order and 'price' in order and order['price'] is not None:
                actual_price = float(order['price'])
            
            # Calculate PnL
            position = get_position_info(symbol)
            if position:
                open_value = position['base_amount'] * position['open_price']
                close_value = actual_amount * actual_price
                fee = close_value * TAKER_FEE
                pnl = close_value - open_value - fee
                pnl_percent = (pnl / open_value) * 100 if open_value > 0 else 0
                
                record_close_with_pnl(symbol, actual_price, close_value, actual_amount, pnl, pnl_percent, fee)
                
                # Update scalping PnL if needed
                if position.get('trading_mode') == 'SCALPING':
                    update_scalping_daily_pnl(pnl_percent / 100)
                
                pnl_emoji = "üü¢" if pnl >= 0 else "üî¥"
                safe_send(
                    f"‚úÖ {pnl_emoji} Closed {symbol}\n"
                    f"Amount: {actual_amount:.4f} @ {actual_price:.6f}\n"
                    f"P&L: {pnl:+.4f} USDT ({pnl_percent:+.2f}%)\n"
                    f"Reason: {reason}"
                )
            else:
                record_close_position(symbol, actual_price, close_value, actual_amount)
                safe_send(f"‚úÖ Closed {symbol}: {actual_amount:.4f} @ {actual_price:.6f} ({reason})")
                
        except Exception as e:
            logger.error(f"Error executing sell order for {symbol}: {e}")
            return False
            
        update_daily_trade_count(symbol)
        return True
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error closing position {symbol}: {error_msg}")
        
        if any(err in error_msg for err in ["Insufficient balance", "lower limit", "too small"]):
            mark_position_closed(symbol)
            return True
        else:
            safe_send(f"‚ùå Error closing {symbol}: {error_msg}")
            return False

def get_position_info(symbol: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏"""
    cursor.execute("SELECT base_amount, open_price, trading_mode FROM positions WHERE symbol=? AND status='OPEN'", (symbol,))
    row = cursor.fetchone()
    if row:
        return {'base_amount': row[0], 'open_price': row[1], 'trading_mode': row[2]}
    return None

def mark_position_closed(symbol: str):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î"""
    try:
        cursor.execute("UPDATE positions SET status='CLOSED', close_time=datetime('now') WHERE symbol=? AND status='OPEN'", (symbol,))
        cursor.execute("REPLACE INTO symbol_cooldown (symbol, last_closed_ts) VALUES (?, ?)", (symbol, int(time.time())))
        conn.commit()
        logger.info(f"Position {symbol} marked as closed")
    except Exception as e:
        logger.error(f"Error marking position closed: {e}")

def record_close_position(symbol: str, price: float, usdt_amount: float, base_amount: float):
    """–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        fee = usdt_amount * TAKER_FEE
        cursor.execute("UPDATE positions SET status='CLOSED', close_time=datetime('now'), close_price=? WHERE symbol=? AND status='OPEN'", (price, symbol))
        cursor.execute("""
            INSERT INTO trade_history (symbol, action, price, usdt_amount, base_amount, fee, time, timestamp, trading_mode) 
            VALUES (?, 'SELL', ?, ?, ?, ?, datetime('now'), ?, ?)
        """, (symbol, price, usdt_amount, base_amount, fee, int(time.time()), CURRENT_MODE))
        cursor.execute("REPLACE INTO symbol_cooldown (symbol, last_closed_ts) VALUES (?, ?)", (symbol, int(time.time())))
        conn.commit()
    except Exception as e:
        logger.error(f"Error recording close position: {e}")

def record_close_with_pnl(symbol: str, price: float, usdt_amount: float, base_amount: float, pnl: float, pnl_percent: float, fee: float):
    """–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å PnL"""
    try:
        cursor.execute("""
            UPDATE positions SET status='CLOSED', close_time=datetime('now'), close_price=?, pnl=?, pnl_percent=?, fee_paid=fee_paid+? 
            WHERE symbol=? AND status='OPEN'
        """, (price, pnl, pnl_percent, fee, symbol))
        
        cursor.execute("""
            INSERT INTO trade_history (symbol, action, price, usdt_amount, base_amount, fee, time, timestamp, trading_mode) 
            VALUES (?, 'SELL', ?, ?, ?, ?, datetime('now'), ?, ?)
        """, (symbol, price, usdt_amount, base_amount, fee, int(time.time()), CURRENT_MODE))
        
        cursor.execute("REPLACE INTO symbol_cooldown (symbol, last_closed_ts) VALUES (?, ?)", (symbol, int(time.time())))
        conn.commit()
        
        logger.info(f"Recorded close position for {symbol} with PnL: {pnl:.4f} USDT ({pnl_percent:.2f}%)")
    except Exception as e:
        logger.error(f"Error recording close position with PnL: {e}")

def is_in_cooldown(symbol: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–¥–æ—É–Ω–∞"""
    settings = get_current_settings()
    cursor.execute("SELECT last_closed_ts FROM symbol_cooldown WHERE symbol=?", (symbol,))
    row = cursor.fetchone()
    if not row:
        return False
    return (time.time() - int(row[0])) < settings['cooldown']

def check_daily_trade_limit(symbol: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ trades"""
    settings = get_current_settings()
    today = datetime.now().strftime('%Y-%m-%d')
    
    cursor.execute("SELECT daily_trade_count, last_trade_date FROM symbol_cooldown WHERE symbol=?", (symbol,))
    row = cursor.fetchone()
    
    if not row:
        return True
        
    daily_count, last_date = row
    if last_date != today:
        cursor.execute("UPDATE symbol_cooldown SET daily_trade_count=0, last_trade_date=? WHERE symbol=?", (today, symbol))
        conn.commit()
        return True
        
    return daily_count < settings.get('max_daily_trades_per_symbol', 5)

def update_daily_trade_count(symbol: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö trades"""
    today = datetime.now().strftime('%Y-%m-%d')
    
    cursor.execute("SELECT daily_trade_count, last_trade_date FROM symbol_cooldown WHERE symbol=?", (symbol,))
    row = cursor.fetchone()
    
    if not row:
        cursor.execute("INSERT INTO symbol_cooldown (symbol, daily_trade_count, last_trade_date) VALUES (?, 1, ?)", (symbol, today))
    else:
        daily_count, last_date = row
        if last_date == today:
            cursor.execute("UPDATE symbol_cooldown SET daily_trade_count=daily_trade_count+1 WHERE symbol=?", (symbol,))
        else:
            cursor.execute("UPDATE symbol_cooldown SET daily_trade_count=1, last_trade_date=? WHERE symbol=?", (today, symbol))
    
    conn.commit()

def compute_equity() -> float:
    """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞"""
    bal = fetch_balance()
    if not bal:
        return 0.0
        
    usdt_free = float(bal['free'].get('USDT', 0) or 0)
    total = usdt_free
    
    positions = get_open_positions()
    for symbol, pos in positions.items():
        try:
            ticker = exchange.fetch_ticker(symbol)
            current_price = float(ticker['last'])
            total += pos['base_amount'] * current_price
        except Exception as e:
            logger.error(f"Error calculating equity for {symbol}: {e}")
            continue
            
    return total

def get_concurrent_trades_count() -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö trades"""
    cursor.execute("SELECT COUNT(*) FROM positions WHERE status='OPEN'")
    return cursor.fetchone()[0]

def can_open_new_trade() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ trade"""
    settings = get_current_settings()
    return get_concurrent_trades_count() < settings['max_trades']

# ====== EXIT CONDITIONS ======
def check_position_exits():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞"""
    positions = get_open_positions()
    
    for symbol, pos in positions.items():
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–∏
            if pos['trading_mode'] == 'SCALPING':
                check_scalping_exit(symbol, pos)
            else:
                check_swing_exit(symbol, pos)
                
        except Exception as e:
            logger.error(f"Exit check error {symbol}: {e}")

def check_swing_exit(symbol: str, pos: Dict):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–ª–∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if CURRENT_MODE in TRADING_MODES and TRADING_MODES[CURRENT_MODE]["type"] == "swing":
        settings = TRADING_MODES[CURRENT_MODE]
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        settings = TRADING_MODES["CONSERVATIVE"]
    
    ohlcv = fetch_ohlcv(symbol, "15m", limit=20)
    if not ohlcv:
        return
        
    df = pd.DataFrame(ohlcv, columns=['timestamp','open','high','low','close','volume']).astype(float)
    current_price = df['close'].iloc[-1]
    open_price = pos['open_price']
    stop_loss = pos['stop_loss']
    take_profit = pos['take_profit']
    max_price = pos.get('max_price', open_price)
    
    if current_price > max_price:
        update_max_price_db(symbol, current_price)
        max_price = current_price
    
    profit_pct = (current_price - open_price) / open_price
    
    exit_reason = ""
    
    # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ (—Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç)
    if current_price <= stop_loss:
        exit_reason = f"SL {profit_pct*100:+.2f}%"
    elif current_price >= take_profit:
        exit_reason = f"TP {profit_pct*100:+.2f}%"
    # –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    elif 'trailing_start' in settings and profit_pct >= settings['trailing_start']:
        trail_level = max_price * (1 - settings['trailing_step'])
        if current_price <= trail_level:
            exit_reason = f"TRAIL {profit_pct*100:+.2f}%"
    # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –±–æ–ª—å—à–æ–π –ø—Ä–æ—Å–∞–¥–∫–µ
    elif 'max_stop_loss' in settings and profit_pct <= -settings['max_stop_loss'] * 1.5:
        exit_reason = f"EMERGENCY {profit_pct*100:+.2f}%"
    
    if exit_reason:
        logger.info(f"Exit condition triggered for {symbol}: {exit_reason}")
        safe_close_position(symbol, exit_reason)

def check_scalping_exit(symbol: str, pos: Dict):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
    strategy_config = SCALPING_STRATEGIES.get(CURRENT_SCALPING_STRATEGY, SCALPING_STRATEGIES["BB_SQUEEZE"])
    
    ohlcv = fetch_ohlcv(symbol, strategy_config['timeframe_entry'], limit=10)
    if not ohlcv:
        return
        
    df = pd.DataFrame(ohlcv, columns=['timestamp','open','high','low','close','volume']).astype(float)
    current_price = df['close'].iloc[-1]
    open_price = pos['open_price']
    stop_loss = pos['stop_loss']
    take_profit = pos['take_profit']
    
    profit_pct = (current_price - open_price) / open_price
    
    exit_reason = ""
    
    # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
    if current_price <= stop_loss:
        exit_reason = f"SCALPING SL {profit_pct*100:+.2f}%"
    elif current_price >= take_profit:
        exit_reason = f"SCALPING TP {profit_pct*100:+.2f}%"
    # –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
    elif 'quick_exit' in strategy_config and profit_pct >= strategy_config['quick_exit']:
        exit_reason = f"QUICK EXIT {profit_pct*100:+.2f}%"
    
    if exit_reason:
        logger.info(f"Scalping exit condition triggered for {symbol}: {exit_reason}")
        safe_close_position(symbol, exit_reason)
        
def update_max_price_db(symbol: str, price: float):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    cursor.execute("UPDATE positions SET max_price=? WHERE symbol=? AND status='OPEN'", (price, symbol))
    conn.commit()

# ====== TELEGRAM COMMANDS ======
def start(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞"""
    welcome_msg = """
ü§ñ <b>UNIVERSAL TRADING BOT</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:</b>
üü¢ <b>–ê–ì–†–ï–°–°–ò–í–ù–´–ô</b> - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫
üü° <b>–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô</b> - –ú–µ–Ω—å—à–µ —Å–¥–µ–ª–æ–∫, –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ
üî¥ <b>–°–ö–ê–õ–¨–ü–ò–ù–ì</b> - –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/close SYMBOL - –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º!
    """
    update.message.reply_text(welcome_msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard())

def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üü¢ –ê–ì–†–ï–°–°–ò–í–ù–´–ô":
        switch_mode("AGGRESSIVE", update)
    elif text == "üü° –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô":
        switch_mode("CONSERVATIVE", update)
    elif text == "üî¥ –°–ö–ê–õ–¨–ü–ò–ù–ì":
        show_scalping_menu(update)
    elif text == "üìä –°–¢–ê–¢–£–°":
        cmd_status(update, context)
    elif text == "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê":
        cmd_stats(update, context)
    elif text == "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò":
        show_settings_menu(update)
    elif text in ["üéØ BB Squeeze", "üöÄ EMA Momentum", "üìä VWAP Bounce", "üí• Breakout"]:
        handle_scalping_strategy(text, update)
    elif text == "üîô –ù–ê–ó–ê–î":
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    elif text == "üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø":
        cmd_sync(update, context)
    elif text == "üì• –ò–ú–ü–û–†–¢":
        cmd_import(update, context)
    elif text == "üîß –î–ï–ë–ê–ì":
        cmd_debug(update, context)

def switch_mode(mode: str, update):
    """–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    global CURRENT_MODE
    CURRENT_MODE = mode
    
    mode_info = TRADING_MODES[mode]
    msg = f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: <b>{mode_info['name']}</b>\n\n"
    
    if mode == "SCALPING":
        msg += f"üìä –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>{SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]['name']}</b>\n"
        msg += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {mode_info['scan_interval']}—Å\n"
        msg += f"üî¢ –ú–∞–∫—Å —Å–¥–µ–ª–æ–∫: {mode_info['max_trades']}\n"
        msg += f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {mode_info['trade_pct']*100}%"
        update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_scalping_keyboard())
    else:
        msg += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {mode_info['scan_interval']}—Å\n"
        msg += f"üî¢ –ú–∞–∫—Å —Å–¥–µ–ª–æ–∫: {mode_info['max_trades']}\n"
        msg += f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {mode_info['trade_pct']*100}%\n"
        msg += f"üéØ TP/SL: +{mode_info['take_profit']*100:.1f}%/ -{mode_info['max_stop_loss']*100:.1f}%\n"
        msg += f"üìä RSI –¥–∏–∞–ø–∞–∑–æ–Ω: {mode_info['rsi_min']}-{mode_info['rsi_max']}"
        update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard())

def show_scalping_menu(update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    global CURRENT_MODE
    CURRENT_MODE = "SCALPING"
    
    current_strategy = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
    
    msg = f"üî¥ <b>–†–ï–ñ–ò–ú –°–ö–ê–õ–¨–ü–ò–ù–ì–ê</b>\n\n"
    msg += f"üìä –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>{current_strategy['name']}</b>\n"
    msg += f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {current_strategy['timeframe_entry']}\n"
    msg += f"üéØ TP/SL: +{current_strategy['take_profit']*100:.1f}%/ -{current_strategy['max_stop_loss']*100:.1f}%\n"
    msg += f"üî¢ –ú–∞–∫—Å —Å–¥–µ–ª–æ–∫: {current_strategy['max_trades']}\n\n"
    msg += "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞:"
    
    update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_scalping_keyboard())

def handle_scalping_strategy(text: str, update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    global CURRENT_SCALPING_STRATEGY
    
    strategy_map = {
        "üéØ BB Squeeze": "BB_SQUEEZE",
        "üöÄ EMA Momentum": "EMA_MOMENTUM", 
        "üìä VWAP Bounce": "VWAP_BOUNCE",
        "üí• Breakout": "BREAKOUT"
    }
    
    if text in strategy_map:
        CURRENT_SCALPING_STRATEGY = strategy_map[text]
        strategy_config = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
        
        msg = f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: <b>{strategy_config['name']}</b>\n\n"
        msg += f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {strategy_config['timeframe_entry']}\n"
        msg += f"üéØ TP: +{strategy_config['take_profit']*100:.1f}% | SL: -{strategy_config['max_stop_loss']*100:.1f}%\n"
        msg += f"‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥: +{strategy_config['quick_exit']*100:.1f}%\n"
        msg += f"üìä RSI –¥–∏–∞–ø–∞–∑–æ–Ω: {strategy_config['rsi_range'][0]}-{strategy_config['rsi_range'][1]}\n"
        msg += f"üî¢ –ú–∞–∫—Å —Å–¥–µ–ª–æ–∫: {strategy_config['max_trades']}\n"
        msg += f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {strategy_config['trade_pct']*100}%"
        
        update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_scalping_keyboard())

def show_settings_menu(update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    msg = "‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê</b>\n\n"
    msg += "üîÑ <b>–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø</b> - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ë–î\n"
    msg += "üì• <b>–ò–ú–ü–û–†–¢</b> - –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π\n"
    msg += "üîß <b>–î–ï–ë–ê–ì</b> - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
    msg += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_settings_keyboard())

def cmd_status(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        equity = compute_equity()
        realized = realized_pnl_total()
        unrealized = unrealized_pnl_total()
        positions = get_open_positions()
        stats = get_trading_stats()
        settings = get_current_settings()
        
        total_pnl = realized + unrealized
        pnl_color = "üü¢" if total_pnl >= 0 else "üî¥"
        
        current_mode_info = TRADING_MODES[CURRENT_MODE]
        
        msg = f"üìä <b>UNIVERSAL TRADING BOT</b>\n\n"
        msg += f"üéØ <b>–†–µ–∂–∏–º:</b> {current_mode_info['name']}\n"
        
        if CURRENT_MODE == "SCALPING":
            msg += f"üìà <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]['name']}\n"
        
        msg += f"üí∞ <b>–ö–∞–ø–∏—Ç–∞–ª:</b> {equity:.2f} USDT\n"
        msg += f"üìà <b>P&L:</b> {pnl_color} {total_pnl:+.2f} USDT "
        msg += f"(–†–µ–∞–ª–∏–∑: {realized:+.2f} | –ù–µ—Ä–µ–∞–ª–∏–∑: {unrealized:+.2f})\n"
        msg += f"üî¢ <b>–ü–æ–∑–∏—Ü–∏–∏:</b> {len(positions)}/{settings['max_trades']}\n\n"
        
        bal = fetch_balance()
        usdt_free = float(bal.get('free', {}).get('USDT', 0) or 0)
        
        if positions:
            msg += f"üìà <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ({len(positions)}):</b>\n"
            for sym, pos in positions.items():
                try:
                    ticker = exchange.fetch_ticker(sym)
                    current_price = float(ticker['last'])
                    
                    profit = (current_price - pos['open_price']) / pos['open_price'] * 100
                    profit_net = profit - ROUNDTRIP_FEE * 100
                    
                    position_value = current_price * pos['base_amount']
                    
                    emoji = "üü¢" if profit_net > 0 else "üî¥"
                    base_currency = sym.split('/')[0]
                    
                    msg += f"{emoji} <b>{sym}</b> [{pos['trading_mode']}]\n"
                    msg += f"   –ö–æ–ª-–≤–æ: {pos['base_amount']:.4f} {base_currency}\n"
                    msg += f"   –í—Ö–æ–¥: {pos['open_price']:.6f} | –¢–µ–∫—É—â: {current_price:.6f}\n"
                    msg += f"   P&L: {profit_net:+.2f}% | –°—Ç–æ–∏–º–æ—Å—Ç—å: {position_value:.2f} USDT\n"
                    
                except Exception as e:
                    logger.error(f"Error processing position {sym}: {e}")
                    msg += f"‚ùå <b>{sym}</b> - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"
        else:
            msg += "üì≠ <b>–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n"
        
        msg += f"\nüí∏ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {usdt_free:.2f} USDT"
        
        if update and hasattr(update, 'message'):
            update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard())
        else:
            safe_send(msg)
        
    except Exception as e:
        logger.error(f"Error in cmd_status: {e}")
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        if update and hasattr(update, 'message'):
            update.message.reply_text(error_msg)
        else:
            safe_send(error_msg)

def send_auto_status():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        equity = compute_equity()
        realized = realized_pnl_total()
        unrealized = unrealized_pnl_total()
        positions = get_open_positions()
        settings = get_current_settings()
        
        total_pnl = realized + unrealized
        pnl_color = "üü¢" if total_pnl >= 0 else "üî¥"
        
        current_mode_info = TRADING_MODES[CURRENT_MODE]
        
        msg = f"üìä <b>–ê–í–¢–û-–°–¢–ê–¢–£–°</b>\n\n"
        msg += f"üéØ <b>–†–µ–∂–∏–º:</b> {current_mode_info['name']}\n"
        
        if CURRENT_MODE == "SCALPING":
            msg += f"üìà <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]['name']}\n"
        
        msg += f"üí∞ <b>–ö–∞–ø–∏—Ç–∞–ª:</b> {equity:.2f} USDT\n"
        msg += f"üìà <b>P&L:</b> {pnl_color} {total_pnl:+.2f} USDT\n"
        msg += f"üî¢ <b>–ü–æ–∑–∏—Ü–∏–∏:</b> {len(positions)}/{settings['max_trades']}\n"
        
        if positions:
            total_value = 0
            for sym, pos in positions.items():
                try:
                    ticker = exchange.fetch_ticker(sym)
                    current_price = float(ticker['last'])
                    total_value += pos['base_amount'] * current_price
                except:
                    continue
            msg += f"üíé <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π:</b> {total_value:.2f} USDT"
        
        safe_send(msg)
        
    except Exception as e:
        logger.error(f"Error in auto status: {e}")

def realized_pnl_total() -> float:
    """–û–±—â–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL"""
    try:
        cursor.execute("SELECT SUM(pnl) FROM positions WHERE status='CLOSED' AND pnl IS NOT NULL")
        row = cursor.fetchone()
        return float(row[0]) if row and row[0] is not None else 0.0
    except Exception as e:
        logger.error(f"Realized PnL error: {e}")
        return 0.0

def unrealized_pnl_total() -> float:
    """–û–±—â–∏–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL"""
    total = 0.0
    try:
        positions = get_open_positions()
        for sym, pos in positions.items():
            ohlcv = fetch_ohlcv(sym, "15m", limit=1)
            if ohlcv:
                price = float(ohlcv[-1][4])
                current_value = price * pos['base_amount']
                open_value = pos['open_price'] * pos['base_amount']
                total += (current_value - open_value)
    except Exception as e:
        logger.error(f"Unrealized PnL error: {e}")
    return total

def get_trading_stats() -> Dict[str, Any]:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ trading"""
    try:
        cursor.execute("""
            SELECT 
                COUNT(*) as total_trades,
                SUM(usdt_amount) as total_volume,
                SUM(fee) as total_fees
            FROM trade_history
        """)
        stats_row = cursor.fetchone()
        
        cursor.execute("""
            SELECT 
                COUNT(*) as closed_trades,
                SUM(CASE WHEN pnl > 0 THEN 1 ELSE 0 END) as winning_trades,
                AVG(CASE WHEN pnl > 0 THEN pnl_percent ELSE NULL END) as avg_win_pct,
                AVG(CASE WHEN pnl <= 0 THEN pnl_percent ELSE NULL END) as avg_loss_pct,
                SUM(pnl) as total_pnl
            FROM positions 
            WHERE status='CLOSED' AND pnl IS NOT NULL
        """)
        trades_row = cursor.fetchone()
        
        stats = {
            'total_trades': stats_row[0] if stats_row else 0,
            'total_volume': float(stats_row[1]) if stats_row and stats_row[1] else 0,
            'total_fees': float(stats_row[2]) if stats_row and stats_row[2] else 0,
            'closed_trades': trades_row[0] if trades_row else 0,
            'winning_trades': trades_row[1] if trades_row else 0,
            'avg_win_pct': float(trades_row[2]) if trades_row and trades_row[2] else 0,
            'avg_loss_pct': float(trades_row[3]) if trades_row and trades_row[3] else 0,
            'total_pnl': float(trades_row[4]) if trades_row and trades_row[4] else 0,
        }
        
        return stats
        
    except Exception as e:
        logger.error(f"Stats error: {e}")
        return {
            'total_trades': 0,
            'total_volume': 0,
            'total_fees': 0,
            'closed_trades': 0,
            'winning_trades': 0,
            'avg_win_pct': 0,
            'avg_loss_pct': 0,
            'total_pnl': 0,
        }

def cmd_stats(update, context):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    stats = get_trading_stats()
    equity = compute_equity()
    realized = realized_pnl_total()
    
    msg = f"üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    
    closed_trades = stats.get('closed_trades', 0)
    if closed_trades > 0:
        winning_trades = stats.get('winning_trades', 0)
        win_rate = (winning_trades / closed_trades) * 100
        total_return = (realized / equity) * 100 if equity > 0 else 0
        
        msg += f"üìä <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
        msg += f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}% ({winning_trades}/{closed_trades})\n"
        msg += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {stats.get('avg_win_pct', 0):.2f}%\n"
        msg += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {stats.get('avg_loss_pct', 0):.2f}%\n"
        msg += f"‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}%\n"
        msg += f"‚Ä¢ –û–±—â–∏–π P&L: {stats.get('total_pnl', 0):.2f} USDT\n"
        msg += f"‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}\n"
        msg += f"‚Ä¢ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {stats['total_volume']:.0f} USDT\n"
        msg += f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: {stats.get('total_fees', 0):.2f} USDT\n\n"
    
    current_mode_info = TRADING_MODES[CURRENT_MODE]
    msg += f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    msg += f"‚Ä¢ –†–µ–∂–∏–º: {current_mode_info['name']}\n"
    
    if CURRENT_MODE == "SCALPING":
        strategy_config = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
        msg += f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_config['name']}\n"
        msg += f"‚Ä¢ TP/SL: +{strategy_config['take_profit']*100:.1f}%/ -{strategy_config['max_stop_loss']*100:.1f}%\n"
        msg += f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {strategy_config['trade_pct']*100}%\n"
    else:
        msg += f"‚Ä¢ TP/SL: +{current_mode_info['take_profit']*100:.1f}%/ -{current_mode_info['max_stop_loss']*100:.1f}%\n"
        msg += f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {current_mode_info['trade_pct']*100}%\n"
        msg += f"‚Ä¢ RSI –¥–∏–∞–ø–∞–∑–æ–Ω: {current_mode_info['rsi_min']}-{current_mode_info['rsi_max']}\n"
    
    update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard())

def cmd_close(update, context):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        if not context.args:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /close SYMBOL")
            return
            
        symbol = context.args[0].upper() + "/USDT" if "/" not in context.args[0].upper() else context.args[0].upper()
        if safe_close_position(symbol, "Manual"):
            update.message.reply_text(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ {symbol}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

def cmd_sync(update, context):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    sync_balance_with_db()
    update.message.reply_text("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=get_main_keyboard())

def cmd_import(update, context):
    """–ò–º–ø–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–π"""
    imported_count = import_existing_positions()
    if imported_count > 0:
        update.message.reply_text(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –ø–æ–∑–∏—Ü–∏–π", reply_markup=get_main_keyboard())
    else:
        update.message.reply_text("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", reply_markup=get_main_keyboard())

def cmd_debug(update, context):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    debug_info = []
    checked = 0
    
    for symbol in active_symbols[:5]:
        if checked >= 3:
            break
            
        if CURRENT_MODE == "SCALPING":
            should_enter, entry_info = get_scalping_signal(symbol)
        else:
            should_enter, entry_info = should_enter_swing_position(symbol)
            
        if isinstance(entry_info, dict):
            usdt_amount = compute_equity() * get_current_settings()['trade_pct']
            usdt_free = float(fetch_balance().get('free', {}).get('USDT', 0) or 0)
            
            debug_info.append(f"üéØ {symbol}: Score {entry_info['score']} | RSI {entry_info.get('rsi', 0):.1f}")
            debug_info.append(f"   Volume: {entry_info.get('volume_ratio', 1):.1f}x")
            debug_info.append(f"   Need: {usdt_amount:.2f} USDT | Have: {usdt_free:.2f} USDT")
            checked += 1
    
    if debug_info:
        update.message.reply_text("üîç –¢–û–ü –°–ò–ì–ù–ê–õ–´:\n" + "\n".join(debug_info), reply_markup=get_main_keyboard())
    else:
        update.message.reply_text("üîç –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_main_keyboard())

def sync_balance_with_db():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ë–î"""
    safe_send("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞...")
    
    bal = fetch_balance()
    synced_count = 0
    created_count = 0
    
    current_positions = get_open_positions()
    
    for symbol in active_symbols:
        try:
            base = symbol.split("/")[0]
            real_balance = float(bal['total'].get(base, 0) or 0)
            
            if symbol in current_positions:
                db_balance = current_positions[symbol]['base_amount']
                
                if real_balance <= 0:
                    cursor.execute("UPDATE positions SET status='CLOSED', close_time=datetime('now') WHERE symbol=? AND status='OPEN'", (symbol,))
                    logger.info(f"Closed position {symbol} - zero balance")
                    
                elif abs(real_balance - db_balance) / max(real_balance, db_balance) > 0.01:
                    cursor.execute("UPDATE positions SET base_amount=? WHERE symbol=? AND status='OPEN'", (real_balance, symbol))
                    synced_count += 1
                    logger.info(f"Synced position {symbol}: {db_balance} -> {real_balance}")
                        
            else:
                if real_balance > 0:
                    try:
                        ticker = exchange.fetch_ticker(symbol)
                        current_price = float(ticker['last'])
                        open_price = current_price
                        
                        settings = get_current_settings()
                        sl_price = open_price * (1 - settings['max_stop_loss'])
                        tp_price = open_price * (1 + settings['take_profit'])
                        
                        record_open_position(symbol, real_balance, open_price, sl_price, tp_price, CURRENT_SCALPING_STRATEGY if CURRENT_MODE == "SCALPING" else "")
                        created_count += 1
                        logger.info(f"Created position {symbol}: {real_balance} @ {open_price:.6f}")
                        
                    except Exception as e:
                        logger.error(f"Error creating position for {symbol}: {e}")
                        
        except Exception as e:
            logger.error(f"Sync error for {symbol}: {e}")
    
    conn.commit()
    safe_send(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {synced_count} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {created_count} —Å–æ–∑–¥–∞–Ω–æ")

def import_existing_positions():
    """–ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
    logger.info("Importing existing positions from exchange...")
    
    try:
        balance = fetch_balance()
        imported_count = 0
        
        current_positions = get_open_positions()
        
        for symbol in active_symbols:
            base_currency = symbol.split('/')[0]
            base_balance = float(balance.get('total', {}).get(base_currency, 0) or 0)
            
            if base_balance > 0 and symbol not in current_positions:
                try:
                    ticker = exchange.fetch_ticker(symbol)
                    current_price = float(ticker['last'])
                    
                    # –î–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    settings = TRADING_MODES["CONSERVATIVE"]
                    stop_loss = current_price * (1 - settings['max_stop_loss'])
                    take_profit = current_price * (1 + settings['take_profit'])
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ
                    record_open_position(symbol, base_balance, current_price, stop_loss, take_profit, "IMPORTED")
                    imported_count += 1
                    logger.info(f"Imported position: {symbol} - {base_balance:.6f} @ {current_price:.6f}")
                    
                except Exception as e:
                    logger.error(f"Error importing position for {symbol}: {e}")
                    continue
        
        conn.commit()
        return imported_count
        
    except Exception as e:
        logger.error(f"Error importing existing positions: {e}")
        return 0
def fix_imported_positions():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        cursor.execute("SELECT symbol FROM positions WHERE status='OPEN' AND trading_mode='SCALPING'")
        rows = cursor.fetchall()
        
        fixed_count = 0
        for row in rows:
            symbol = row[0]
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            cursor.execute("UPDATE positions SET trading_mode='CONSERVATIVE' WHERE symbol=? AND status='OPEN'", (symbol,))
            fixed_count += 1
            logger.info(f"Fixed position mode for {symbol}")
        
        conn.commit()
        return fixed_count
        
    except Exception as e:
        logger.error(f"Error fixing imported positions: {e}")
        return 0
def cmd_fix_positions(update, context):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    fixed_count = fix_imported_positions()
    if fixed_count > 0:
        update.message.reply_text(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –ø–æ–∑–∏—Ü–∏–π", reply_markup=get_main_keyboard())
    else:
        update.message.reply_text("‚úÖ –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=get_main_keyboard())

# ====== MAIN EXECUTION ======
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        global active_symbols
        markets = exchange.load_markets()
        active_symbols = [s for s in SYMBOLS if s in markets]
        
        logger.info(f"Loaded {len(active_symbols)} active symbols")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dp = updater.dispatcher
        
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("status", cmd_status))
        dp.add_handler(CommandHandler("stats", cmd_stats))
        dp.add_handler(CommandHandler("close", cmd_close))
        dp.add_handler(CommandHandler("sync", cmd_sync))
        dp.add_handler(CommandHandler("import", cmd_import))
        dp.add_handler(CommandHandler("debug", cmd_debug))
        dp.add_handler(CommandHandler("fix", cmd_fix_positions))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        
        updater.start_polling()
        
        safe_send(f"üöÄ UNIVERSAL TRADING BOT STARTED!")
        safe_send(f"üìà Monitoring {len(active_symbols)} symbols")
        safe_send(f"üéØ Current mode: {TRADING_MODES[CURRENT_MODE]['name']}")
        
        if CURRENT_MODE == "SCALPING":
            safe_send(f"üìä Scalping strategy: {SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]['name']}")
        
        # –ê–≤—Ç–æ-–∏–º–ø–æ—Ä—Ç –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        time.sleep(2)
        import_existing_positions()
        sync_balance_with_db()
        
        last_scan = 0
        last_auto_status = 0
        error_count = 0
        max_errors = 10
        
        logger.info("Main loop started")
        
        while True:
            try:
                current_time = time.time()
                settings = get_current_settings()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–æ–≤
                if current_time - last_scan >= settings['scan_interval']:
                    check_position_exits()
                    
                    # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤
                    if can_open_new_trade():
                        usdt_balance = float(fetch_balance().get('free', {}).get('USDT', 0) or 0)
                        
                        for symbol in active_symbols:
                            if (symbol not in get_open_positions() and 
                                not is_in_cooldown(symbol) and 
                                usdt_balance > MIN_TRADE_USDT):
                                
                                if CURRENT_MODE == "SCALPING":
                                    should_enter, entry_info = get_scalping_signal(symbol)
                                else:
                                    should_enter, entry_info = should_enter_swing_position(symbol)
                                
                                if should_enter and isinstance(entry_info, dict):
                                    usdt_amount = compute_equity() * settings['trade_pct']
                                    
                                    current_usdt_balance = float(fetch_balance().get('free', {}).get('USDT', 0) or 0)
                                    if current_usdt_balance < usdt_amount:
                                        continue
                                    
                                    if check_min_order_value(symbol, usdt_amount) and usdt_amount <= current_usdt_balance:
                                        base_amount = round_amount(symbol, usdt_amount / entry_info['price'])
                                        
                                        if not DRY_RUN:
                                            try:
                                                order = exchange.create_market_order(symbol, 'buy', base_amount)
                                                logger.info(f"Buy order executed for {symbol}")
                                                
                                                actual_amount = base_amount
                                                actual_price = entry_info['price']
                                                
                                                if 'filled' in order and order['filled'] is not None:
                                                    actual_amount = float(order['filled'])
                                                if 'price' in order and order['price'] is not None:
                                                    actual_price = float(order['price'])
                                                
                                                actual_usdt_amount = actual_amount * actual_price
                                                
                                                strategy_name = CURRENT_SCALPING_STRATEGY if CURRENT_MODE == "SCALPING" else ""
                                                record_open_position(symbol, actual_amount, actual_price, entry_info['stop_loss'], entry_info['take_profit'], strategy_name)
                                                update_daily_trade_count(symbol)
                                                
                                                mode_name = TRADING_MODES[CURRENT_MODE]['name']
                                                if CURRENT_MODE == "SCALPING":
                                                    strategy_text = f" | {SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]['name']}"
                                                else:
                                                    strategy_text = ""
                                                
                                                safe_send(
                                                    f"üéØ ENTER {symbol} | {mode_name}{strategy_text}\n"
                                                    f"Price: {actual_price:.6f}\n"
                                                    f"Amount: {actual_amount:.4f} ({actual_usdt_amount:.2f} USDT)\n"
                                                    f"Score: {entry_info['score']}/100\n"
                                                    f"TP: +{settings['take_profit']*100:.1f}% | SL: -{settings['max_stop_loss']*100:.1f}%"
                                                )
                                            except Exception as e:
                                                logger.error(f"Error executing buy order for {symbol}: {e}")
                                                continue

                
                    last_scan = current_time
                    error_count = 0
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
                if current_time - last_auto_status >= settings['status_interval']:
                    send_auto_status()
                    last_auto_status = current_time
                
                time.sleep(5)
                
            except Exception as e:
                error_count += 1
                logger.error(f"Main loop error #{error_count}: {e}")
                
                if error_count >= max_errors:
                    safe_send(f"üÜò CRITICAL: Too many errors ({error_count}), restarting...")
                    raise e
                
                time.sleep(30)
                
    except KeyboardInterrupt:
        safe_send("‚èπ Bot stopped by user")
    except Exception as e:
        logger.critical(f"Fatal error in main: {e}")
        safe_send(f"üí• FATAL ERROR: {e}")
    finally:
        try:
            conn.close()
            if os.path.exists(LOCK_FILE):
                os.remove(LOCK_FILE)
            logger.info("Bot shutdown complete")
        except Exception as e:
            logger.error(f"Error during shutdown: {e}")

if __name__ == "__main__":
    main()
