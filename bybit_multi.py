#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ultimate_trading_bot.py ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
"""
import os, sys, time, math, ccxt, pandas as pd, sqlite3
import logging
from datetime import datetime, timedelta
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
import threading
import signal

from ta.trend import EMAIndicator, MACD, ADXIndicator
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.volatility import BollingerBands, AverageTrueRange
from ta.volume import VolumeWeightedAveragePrice
from telegram import Bot, ParseMode, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

# ====== CONFIGURATION ======
API_KEY = os.getenv("BYBIT_API_KEY", "API_KEY")
API_SECRET = os.getenv("BYBIT_API_SECRET", "API_SECRET")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "TELEGRAM_TOKEN")
CHAT_ID = CHAT_ID

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
SYMBOLS = [
    "BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT", "XRP/USDT",
    "ADA/USDT", "AVAX/USDT", "DOT/USDT", "LINK/USDT", 
    "DOGE/USDT", "LTC/USDT", "ATOM/USDT", "UNI/USDT", "XLM/USDT",
    "ETC/USDT", "FIL/USDT", "THETA/USDT", "AAVE/USDT"
]

# ====== TRADING MODES ======
TRADING_MODES = {
    "AGGRESSIVE": {
        "name": "üü¢ –ê–ì–†–ï–°–°–ò–í–ù–´–ô",
        "type": "swing",
        "scan_interval": 30,
        "status_interval": 300,
        "max_trades": 8,
        "trade_pct": 0.15,
        "rsi_min": 35,
        "rsi_max": 75,
        "volume_multiplier": 1.2,
        "adx_min": 12,
        "min_score": 40,
        "cooldown": 2 * 60,
        "max_stop_loss": 0.01,
        "take_profit": 0.02,
        "trailing_start": 0.004,
        "trailing_step": 0.002,
        "max_daily_trades_per_symbol": 3
    },
    "CONSERVATIVE": {
        "name": "üü° –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô", 
        "type": "swing",
        "scan_interval": 60,
        "status_interval": 600,
        "max_trades": 4,
        "trade_pct": 0.20,
        "rsi_min": 40,
        "rsi_max": 65,
        "volume_multiplier": 1.3,
        "adx_min": 15,
        "min_score": 55,
        "cooldown": 10 * 60,
        "max_stop_loss": 0.015,
        "take_profit": 0.03,
        "trailing_start": 0.015,
        "trailing_step": 0.005,
        "max_daily_trades_per_symbol": 2
    },
    "SCALPING": {
        "name": "üî¥ –°–ö–ê–õ–¨–ü–ò–ù–ì",
        "type": "scalping",
        "scan_interval": 5,
        "status_interval": 180,
        "max_trades": 12,
        "trade_pct": 0.25,
        "active_strategy": "BB_SQUEEZE"
    }
}

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
SCALPING_STRATEGIES = {
    "BB_SQUEEZE": {
        "name": "Bollinger Squeeze",
        "scan_interval": 3,
        "max_trades": 15,
        "trade_pct": 0.3,
        "timeframe_entry": "5m",
        "timeframe_trend": "15m",
        "max_stop_loss": 0.003,
        "take_profit": 0.008,
        "quick_exit": 0.005,
        "rsi_range": (25, 75),
        "volume_multiplier": 1.3,
        "bb_period": 10,
        "bb_std": 1.2,
        "max_position_age": 900
    },
    "EMA_MOMENTUM": {
        "name": "EMA Momentum",
        "scan_interval": 5,
        "max_trades": 12,
        "trade_pct": 0.15,
        "timeframe_entry": "5m",
        "timeframe_trend": "15m",
        "max_stop_loss": 0.0025,
        "take_profit": 0.005,
        "quick_exit": 0.004,
        "rsi_range": (30, 70),
        "volume_multiplier": 1.2,
        "ema_fast": 5,
        "ema_slow": 12
    },
    "VWAP_BOUNCE": {
        "name": "VWAP Bounce",
        "scan_interval": 4,
        "max_trades": 10,
        "trade_pct": 0.18,
        "timeframe_entry": "5m",
        "timeframe_trend": "15m",
        "max_stop_loss": 0.0015,
        "take_profit": 0.0035,
        "quick_exit": 0.0025,
        "rsi_range": (35, 65),
        "volume_multiplier": 1.8,
        "vwap_period": 20
    },
    "BREAKOUT": {
        "name": "Breakout Scalping",
        "scan_interval": 5,
        "max_trades": 8,
        "trade_pct": 0.20,
        "timeframe_entry": "5m",
        "timeframe_trend": "15m",
        "max_stop_loss": 0.003,
        "take_profit": 0.006,
        "quick_exit": 0.004,
        "rsi_range": (40, 80),
        "volume_multiplier": 2.0,
        "breakout_period": 15
    }
}

# –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CURRENT_MODE = "AGGRESSIVE"
CURRENT_SCALPING_STRATEGY = "BB_SQUEEZE"

# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
SCALPING_GLOBAL = {
    "cooldown": 15,
    "max_daily_trades_per_symbol": 25,
    "time_in_trade": 180,
    "max_consecutive_losses": 3,
    "profit_target_daily": 0.05,
    "loss_limit_daily": -0.02,
}

# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MIN_TRADE_USDT = 5.0
MIN_USDT_PER_SYMBOL = {
    "BTC/USDT": 5.0, "ETH/USDT": 5.0, "BNB/USDT": 2.0, "SOL/USDT": 2.0,
    "XRP/USDT": 2.0, "ADA/USDT": 2.0, "AVAX/USDT": 3.0, "DOT/USDT": 2.0,
    "LINK/USDT": 2.0, "MATIC/USDT": 2.0, "DOGE/USDT": 2.0, "LTC/USDT": 2.0,
    "ATOM/USDT": 2.0, "UNI/USDT": 2.0, "XLM/USDT": 2.0, "ETC/USDT": 2.0,
    "FIL/USDT": 2.0, "THETA/USDT": 2.0, "EOS/USDT": 2.0, "AAVE/USDT": 3.0,
}

TAKER_FEE = 0.001
ROUNDTRIP_FEE = TAKER_FEE * 2

LOCK_FILE = "/tmp/ultimate_trading_bot.lock"
DB_FILE = "trades_ultimate.db"

DRY_RUN = False

# ====== LOGGING ======
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ultimate_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ====== DATABASE MANAGER ======
class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(DatabaseManager, cls).__new__(cls)
                cls._instance._initialized = False
            return cls._instance
    
    def __init__(self):
        if not self._initialized:
            self.db_file = DB_FILE
            self._connection = None
            self._cursor = None
            self._initialize_database()
            self._initialized = True
    
    def _initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self._connection = sqlite3.connect(self.db_file, check_same_thread=False)
            self._cursor = self._connection.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
            self._cursor.execute("""
            CREATE TABLE IF NOT EXISTS positions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                symbol TEXT,
                trading_mode TEXT,
                strategy TEXT,
                base_amount REAL,
                open_price REAL,
                stop_loss REAL,
                take_profit REAL,
                max_price REAL DEFAULT 0,
                open_time TEXT,
                close_time TEXT,
                close_price REAL,
                pnl REAL DEFAULT 0,
                pnl_percent REAL DEFAULT 0,
                status TEXT DEFAULT 'OPEN',
                fee_paid REAL DEFAULT 0,
                entry_reason TEXT,
                exit_reason TEXT,
                duration_seconds INTEGER DEFAULT 0
            )
            """)
            
            # –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤
            self._cursor.execute("""
            CREATE TABLE IF NOT EXISTS trade_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                symbol TEXT,
                action TEXT,
                price REAL,
                usdt_amount REAL,
                base_amount REAL,
                fee REAL DEFAULT 0,
                time TEXT,
                timestamp INTEGER,
                trading_mode TEXT,
                strategy TEXT
            )
            """)
            
            # –ö—É–¥–æ—É–Ω—ã –∏ –ª–∏–º–∏—Ç—ã
            self._cursor.execute("""
            CREATE TABLE IF NOT EXISTS symbol_cooldown (
                symbol TEXT PRIMARY KEY,
                last_closed_ts INTEGER DEFAULT 0,
                daily_trade_count INTEGER DEFAULT 0,
                last_trade_date TEXT
            )
            """)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self._cursor.execute("""
            CREATE TABLE IF NOT EXISTS performance_stats (
                date TEXT PRIMARY KEY,
                total_trades INTEGER DEFAULT 0,
                winning_trades INTEGER DEFAULT 0,
                total_pnl REAL DEFAULT 0,
                total_volume REAL DEFAULT 0
            )
            """)
            
            # –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            self._cursor.execute("""
            CREATE TABLE IF NOT EXISTS daily_limits (
                date TEXT PRIMARY KEY,
                daily_pnl REAL DEFAULT 0,
                total_trades INTEGER DEFAULT 0,
                consecutive_losses INTEGER DEFAULT 0
            )
            """)
            
            self._connection.commit()
            logger.info("Database initialized successfully")
            
        except Exception as e:
            logger.error(f"Database initialization error: {e}")
            raise
    
    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            if self._connection is None:
                self._initialize_database()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ
            self._cursor.execute("SELECT 1")
            return self._connection, self._cursor
        except sqlite3.ProgrammingError:
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –º–µ—Ä—Ç–≤–æ
            logger.warning("Database connection dead, recreating...")
            try:
                if self._connection:
                    self._connection.close()
            except:
                pass
            self._initialize_database()
            return self._connection, self._cursor
        except Exception as e:
            logger.error(f"Error getting database connection: {e}")
            raise
    
    def execute(self, query, params=()):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        conn, cursor = self.get_connection()
        try:
            cursor.execute(query, params)
            conn.commit()
            return cursor
        except sqlite3.ProgrammingError:
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            logger.warning("Database error, reconnecting...")
            self._initialize_database()
            conn, cursor = self.get_connection()
            cursor.execute(query, params)
            conn.commit()
            return cursor
        except Exception as e:
            logger.error(f"Database execute error: {e}")
            conn.rollback()
            raise
    
    def fetchone(self, query, params=()):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        cursor = self.execute(query, params)
        return cursor.fetchone()
    
    def fetchall(self, query, params=()):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫"""
        cursor = self.execute(query, params)
        return cursor.fetchall()
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self._connection:
                self._connection.close()
                self._connection = None
                self._cursor = None
        except Exception as e:
            logger.error(f"Error closing database: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
db = DatabaseManager()

# ====== INITIALIZATION ======
if os.path.exists(LOCK_FILE):
    logger.error("Lock file exists ‚Äî bot already running. Exit.")
    sys.exit(1)
open(LOCK_FILE, "w").close()

try:
    exchange = ccxt.bybit({
        "apiKey": API_KEY,
        "secret": API_SECRET,
        "enableRateLimit": True,
        "options": {"defaultType": "spot"},
        "timeout": 30000,
    })
    exchange.fetch_balance()
    logger.info("Exchange connection successful")
except Exception as e:
    logger.error(f"Exchange connection failed: {e}")
    sys.exit(1)

bot = Bot(token=TELEGRAM_TOKEN)

# ====== CACHE FOR SETTINGS ======
_settings_cache = {}
_last_settings_update = 0
CACHE_DURATION = 10  # —Å–µ–∫—É–Ω–¥

# ====== KEYBOARDS ======
def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üü¢ –ê–ì–†–ï–°–°–ò–í–ù–´–ô"), KeyboardButton("üü° –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô")],
        [KeyboardButton("üî¥ –°–ö–ê–õ–¨–ü–ò–ù–ì"), KeyboardButton("üìä –°–¢–ê–¢–£–°")],
        [KeyboardButton("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò"), KeyboardButton("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_scalping_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    keyboard = [
        [KeyboardButton("üéØ BB Squeeze"), KeyboardButton("üöÄ EMA Momentum")],
        [KeyboardButton("üìä VWAP Bounce"), KeyboardButton("üí• Breakout")],
        [KeyboardButton("üîô –ù–ê–ó–ê–î")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = [
        [KeyboardButton("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø"), KeyboardButton("üì• –ò–ú–ü–û–†–¢")],
        [KeyboardButton("üîß –î–ï–ë–ê–ì"), KeyboardButton("üîô –ù–ê–ó–ê–î")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ====== CORE FUNCTIONS ======
def safe_send(text: str, max_retries: int = 3) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    for attempt in range(max_retries):
        try:
            bot.send_message(chat_id=CHAT_ID, text=text, parse_mode=ParseMode.HTML)
            return True
        except Exception as e:
            logger.warning(f"Telegram send attempt {attempt + 1} failed: {e}")
            if attempt == max_retries - 1:
                logger.error(f"Failed to send Telegram message: {e}")
            time.sleep(2)
    return False

def retry_api_call(func, max_retries: int = 3, delay: float = 1.0):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ API"""
    for attempt in range(max_retries):
        try:
            return func()
        except ccxt.NetworkError as e:
            if attempt == max_retries - 1:
                logger.error(f"Network error after {max_retries} attempts: {e}")
                raise e
            sleep_time = delay * (2 ** attempt) + np.random.uniform(0, 1)
            logger.warning(f"Network error, retrying in {sleep_time:.2f}s: {e}")
            time.sleep(sleep_time)
        except ccxt.ExchangeError as e:
            logger.error(f"Exchange error: {e}")
            raise e
        except Exception as e:
            if attempt == max_retries - 1:
                logger.error(f"API error after {max_retries} attempts: {e}")
                raise e
            time.sleep(delay * (2 ** attempt))

def fetch_ohlcv(symbol: str, timeframe: str, limit: int = 100) -> List[List]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –¥–ª—è Bybit"""
    def _fetch():
        try:
            # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è Bybit
            timeframe_map = {
                '1m': '1', '3m': '3', '5m': '5', '15m': '15', 
                '30m': '30', '1h': '60', '2h': '120', '4h': '240',
                '6h': '360', '12h': '720', '1d': 'D', '1w': 'W'
            }
            
            bybit_timeframe = timeframe_map.get(timeframe, '15')
            
            data = exchange.fetch_ohlcv(symbol, timeframe=bybit_timeframe, limit=limit)
            if data and len(data) > 0:
                return data
                
            logger.warning(f"No data for {symbol} with timeframe {timeframe}")
            return []
            
        except ccxt.BadSymbol:
            logger.warning(f"Bad symbol {symbol}, removing from active symbols")
            if symbol in active_symbols:
                active_symbols.remove(symbol)
            return []
        except Exception as e:
            logger.warning(f"OHLCV fetch failed for {symbol}: {e}")
            return []
    
    try:
        data = retry_api_call(_fetch, max_retries=2, delay=1.0)
        if not data or len(data) < 20:
            logger.debug(f"Insufficient OHLCV data for {symbol}: {len(data) if data else 0} candles")
            return []
        return data
    except Exception as e:
        logger.warning(f"Failed to fetch OHLCV for {symbol}: {e}")
        return []

def fetch_balance() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    def _fetch():
        return exchange.fetch_balance()
    try:
        return retry_api_call(_fetch)
    except Exception as e:
        logger.error(f"Failed to fetch balance: {e}")
        return {'free': {'USDT': 0.0}, 'total': {'USDT': 0.0}, 'used': {'USDT': 0.0}}

def get_current_settings() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"""
    global _settings_cache, _last_settings_update
    
    current_time = time.time()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
    if (current_time - _last_settings_update < CACHE_DURATION and 
        CURRENT_MODE in _settings_cache):
        return _settings_cache[CURRENT_MODE]
    
    try:
        logger.debug(f"üîÑ Getting fresh settings for mode: {CURRENT_MODE}")
        
        if CURRENT_MODE == "SCALPING":
            strategy_settings = SCALPING_STRATEGIES.get(CURRENT_SCALPING_STRATEGY, SCALPING_STRATEGIES["BB_SQUEEZE"])
            
            settings = {
                'name': strategy_settings['name'],
                'type': 'scalping',
                'scan_interval': strategy_settings.get('scan_interval', 5),
                'status_interval': TRADING_MODES["SCALPING"]['status_interval'],
                'max_trades': strategy_settings.get('max_trades', 12),
                'trade_pct': strategy_settings.get('trade_pct', 0.15),
                'rsi_min': strategy_settings.get('rsi_range', (25, 75))[0],
                'rsi_max': strategy_settings.get('rsi_range', (25, 75))[1],
                'rsi_range': strategy_settings.get('rsi_range', (25, 75)),
                'volume_multiplier': strategy_settings.get('volume_multiplier', 1.3),
                'adx_min': 0,
                'min_score': 70,
                'max_stop_loss': strategy_settings.get('max_stop_loss', 0.003),
                'take_profit': strategy_settings.get('take_profit', 0.008),
                'quick_exit': strategy_settings.get('quick_exit', 0.005),
                'trailing_start': 0,
                'trailing_step': 0,
                'timeframe_entry': strategy_settings.get('timeframe_entry', '5m'),
                'timeframe_trend': strategy_settings.get('timeframe_trend', '15m'),
                'cooldown': SCALPING_GLOBAL.get('cooldown', 15),
                'max_daily_trades_per_symbol': SCALPING_GLOBAL.get('max_daily_trades_per_symbol', 25),
            }
            
        else:
            base_settings = TRADING_MODES.get(CURRENT_MODE, TRADING_MODES["CONSERVATIVE"])
            
            # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            settings = {
                'name': base_settings['name'],
                'type': 'swing',
                'scan_interval': base_settings.get('scan_interval', 60),
                'status_interval': base_settings.get('status_interval', 600),
                'max_trades': base_settings.get('max_trades', 5),
                'trade_pct': base_settings.get('trade_pct', 0.1),
                'rsi_min': base_settings.get('rsi_min', 40),
                'rsi_max': base_settings.get('rsi_max', 65),
                'rsi_range': (base_settings.get('rsi_min', 40), base_settings.get('rsi_max', 65)),
                'volume_multiplier': base_settings.get('volume_multiplier', 1.2),
                'adx_min': base_settings.get('adx_min', 15),
                'min_score': base_settings.get('min_score', 50),
                'max_stop_loss': base_settings.get('max_stop_loss', 0.01),
                'take_profit': base_settings.get('take_profit', 0.02),
                'trailing_start': base_settings.get('trailing_start', 0.005),
                'trailing_step': base_settings.get('trailing_step', 0.002),
                'quick_exit': 0,
                'timeframe_entry': '15m',
                'timeframe_trend': '1h',
                'cooldown': base_settings.get('cooldown', 300),
                'max_daily_trades_per_symbol': base_settings.get('max_daily_trades_per_symbol', 5),
            }
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        required_keys = ['min_score', 'max_stop_loss', 'take_profit', 'scan_interval', 'max_trades']
        for key in required_keys:
            if key not in settings:
                logger.warning(f"‚ö†Ô∏è Missing key {key} in settings, adding default value")
                if key == 'min_score':
                    settings[key] = 50
                elif key == 'max_stop_loss':
                    settings[key] = 0.01
                elif key == 'take_profit':
                    settings[key] = 0.02
                elif key == 'scan_interval':
                    settings[key] = 60
                elif key == 'max_trades':
                    settings[key] = 5
        
        # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        _settings_cache[CURRENT_MODE] = settings
        _last_settings_update = current_time
        
        logger.debug(f"‚úÖ Settings cached for {CURRENT_MODE}: min_score={settings.get('min_score')}")
        return settings
        
    except Exception as e:
        logger.error(f"‚ùå Critical error in get_current_settings: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = {
            'min_score': 50,
            'max_stop_loss': 0.01,
            'take_profit': 0.02,
            'scan_interval': 60,
            'max_trades': 5,
            'trade_pct': 0.1,
            'rsi_min': 40,
            'rsi_max': 65,
            'volume_multiplier': 1.2,
            'adx_min': 15
        }
        return default_settings

def round_amount(symbol: str, amount: float) -> float:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        market = exchange.markets.get(symbol)
        if not market:
            return float(amount)
            
        limits = market.get('limits', {})
        amount_limits = limits.get('amount', {})
        min_amount = amount_limits.get('min', 0.000001)
        step = amount_limits.get('step', min_amount)
        
        if step <= 0:
            return max(float(amount), min_amount)
            
        if step < 1:
            precision = int(round(-math.log10(step)))
            rounded = math.floor(amount / step) * step
            rounded = round(rounded, precision)
        else:
            rounded = math.floor(amount / step) * step
            
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
        result = max(float(rounded), min_amount)
        
        # –î–ª—è –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        current_price = get_current_price(symbol)
        if current_price and result * current_price < 1.0:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤ 1 USDT
            min_for_1usdt = 1.0 / current_price
            min_for_1usdt_rounded = math.ceil(min_for_1usdt / step) * step
            result = max(result, min_for_1usdt_rounded)
            
        return result
        
    except Exception as e:
        logger.error(f"Error rounding amount for {symbol}: {e}")
        return float(amount)

def get_min_amount(symbol: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        market = exchange.markets.get(symbol)
        if market:
            return float(market.get('limits', {}).get('amount', {}).get('min', 0.000001))
    except Exception as e:
        logger.error(f"Error getting min amount for {symbol}: {e}")
    return 0.000001

def check_min_order_value(symbol: str, usdt_amount: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞"""
    min_value = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
    if usdt_amount < min_value:
        logger.debug(f"Order value {usdt_amount:.2f} below minimum {min_value:.2f} for {symbol}")
        return False
    return True
    
def compute_available_usdt() -> float:
    """–†–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ USDT –±–∞–ª–∞–Ω—Å–∞"""
    bal = fetch_balance()
    return float(bal['free'].get('USDT', 0) or 0)

def can_afford_trade(symbol: str, usdt_amount: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º"""
    min_value = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
    available_usdt = compute_available_usdt()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–æ–ø—É—Å–∫–æ–º –¥–ª—è float –∑–Ω–∞—á–µ–Ω–∏–π
    if usdt_amount < min_value - 0.01:
        logger.info(f"‚ùå Order size too small for {symbol}: {usdt_amount:.2f} USDT < {min_value:.2f} USDT min")
        return False
    
    if usdt_amount > available_usdt:
        logger.info(f"‚ùå Insufficient USDT for {symbol}: need {usdt_amount:.2f}, have {available_usdt:.2f}")
        return False
        
    return True

def get_current_price(symbol: str) -> Optional[float]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ —Ç–∏–∫–µ—Ä"""
    try:
        ticker = exchange.fetch_ticker(symbol)
        return float(ticker['last'])
    except Exception as e:
        logger.error(f"Error getting current price for {symbol}: {e}")
        return None

# ====== POSITION MANAGEMENT ======
def get_ohlcv_data(symbol: str, timeframe: str, limit: int) -> Optional[pd.DataFrame]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
    if symbol not in active_symbols:
        logger.debug(f"Symbol {symbol} not in available symbols list")
        return None
        
    ohlcv = fetch_ohlcv(symbol, timeframe, limit)
    if not ohlcv or len(ohlcv) < 20:
        logger.warning(f"Insufficient OHLCV data for {symbol}: {len(ohlcv) if ohlcv else 0} candles")
        return None
        
    try:
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        return df.astype({'open': float, 'high': float, 'low': float, 'close': float, 'volume': float})
    except Exception as e:
        logger.error(f"Error processing OHLCV data for {symbol}: {e}")
        return None

def get_open_positions() -> Dict[str, Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        rows = db.fetchall("SELECT symbol, base_amount, open_price, stop_loss, take_profit, max_price, trading_mode FROM positions WHERE status='OPEN'")
        logger.info(f"Found {len(rows)} open positions in database")
        
        positions = {}
        for row in rows:
            symbol = row[0]
            positions[symbol] = {
                "base_amount": row[1], 
                "open_price": row[2], 
                "stop_loss": row[3],
                "take_profit": row[4],
                "max_price": row[5] or row[2],
                "trading_mode": row[6]
            }
        
        return positions
        
    except Exception as e:
        logger.error(f"Error getting open positions: {e}")
        return {}

def record_open_position(symbol: str, base_amount: float, open_price: float, stop_loss: float, take_profit: float, strategy: str = ""):
    """–ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        usdt_amount = base_amount * open_price
        fee = usdt_amount * TAKER_FEE
        
        db.execute("""
            INSERT INTO positions (symbol, trading_mode, strategy, base_amount, open_price, stop_loss, take_profit, max_price, open_time, fee_paid) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), ?)
        """, (symbol, CURRENT_MODE, strategy, base_amount, open_price, stop_loss, take_profit, open_price, fee))
        
        db.execute("""
            INSERT INTO trade_history (symbol, action, price, usdt_amount, base_amount, fee, time, timestamp, trading_mode, strategy) 
            VALUES (?, 'BUY', ?, ?, ?, ?, datetime('now'), ?, ?, ?)
        """, (symbol, open_price, usdt_amount, base_amount, fee, int(time.time()), CURRENT_MODE, strategy))
        
        logger.info(f"Recorded open position for {symbol}: {base_amount:.6f} @ {open_price:.6f}")
    except Exception as e:
        logger.error(f"Error recording open position: {e}")
def calculate_weighted_average_position(symbol: str) -> Optional[Dict]:
    """–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    try:
        positions = get_all_position_info(symbol)
        if not positions:
            return None
            
        total_amount = 0.0
        total_value = 0.0
        
        for pos in positions:
            total_amount += pos['base_amount']
            total_value += pos['base_amount'] * pos['open_price']
        
        if total_amount > 0:
            avg_price = total_value / total_amount
            return {
                'base_amount': total_amount,
                'open_price': avg_price,
                'position_count': len(positions)
            }
        else:
            return None
            
    except Exception as e:
        logger.error(f"Error calculating weighted average for {symbol}: {e}")
        return None

def get_all_position_info(symbol: str) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –í–°–ï–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    try:
        rows = db.fetchall("""
            SELECT base_amount, open_price, trading_mode, open_time 
            FROM positions 
            WHERE symbol=? AND status='OPEN'
            ORDER BY open_time
        """, (symbol,))
        
        positions = []
        for row in rows:
            positions.append({
                'base_amount': row[0], 
                'open_price': row[1], 
                'trading_mode': row[2],
                'open_time': row[3]
            })
        
        return positions
    except Exception as e:
        logger.error(f"Error getting all positions for {symbol}: {e}")
        return []

def get_position_info(symbol: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏ - –í–û–ó–í–†–ê–©–ê–ï–¢ –¢–û–õ–¨–ö–û –ü–û–°–õ–ï–î–ù–Æ–Æ –ü–û–ó–ò–¶–ò–Æ"""
    row = db.fetchone("SELECT base_amount, open_price, trading_mode FROM positions WHERE symbol=? AND status='OPEN'", (symbol,))
    if row:
        return {'base_amount': row[0], 'open_price': row[1], 'trading_mode': row[2]}
    return None

def mark_position_closed(symbol: str):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î —Å –∑–∞–ø–∏—Å—å—é –ø—Ä–∏—á–∏–Ω—ã"""
    try:
        db.execute("""
            UPDATE positions SET 
                status='CLOSED', 
                close_time=datetime('now'),
                exit_reason='AUTO_CLOSED_NO_BALANCE'
            WHERE symbol=? AND status='OPEN'
        """, (symbol,))
        
        db.execute("REPLACE INTO symbol_cooldown (symbol, last_closed_ts) VALUES (?, ?)", (symbol, int(time.time())))
        
        logger.info(f"Position {symbol} marked as closed in DB")
        
    except Exception as e:
        logger.error(f"Error marking position closed: {e}")

def record_successful_close(symbol: str, amount: float, price: float, reason: str):
    """–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º PnL"""
    try:
        usdt_amount = amount * price
        fee = usdt_amount * TAKER_FEE
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL
        position_info = get_position_info(symbol)
        if position_info:
            open_value = position_info['base_amount'] * position_info['open_price']
            close_value = amount * price
            pnl = close_value - open_value - fee
            pnl_percent = (pnl / open_value) * 100 if open_value > 0 else 0
            
            db.execute("""
                UPDATE positions SET 
                    status='CLOSED', 
                    close_time=datetime('now'), 
                    close_price=?, 
                    pnl=?, 
                    pnl_percent=?,
                    exit_reason=?,
                    duration_seconds=ROUND((julianday('now') - julianday(open_time)) * 86400)
                WHERE symbol=? AND status='OPEN'
            """, (price, pnl, pnl_percent, reason, symbol))
        else:
            db.execute("""
                UPDATE positions SET 
                    status='CLOSED', 
                    close_time=datetime('now'), 
                    close_price=?,
                    exit_reason=?,
                    duration_seconds=ROUND((julianday('now') - julianday(open_time)) * 86400)
                WHERE symbol=? AND status='OPEN'
            """, (price, reason, symbol))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.execute("""
            INSERT INTO trade_history (symbol, action, price, usdt_amount, base_amount, fee, time, timestamp, trading_mode) 
            VALUES (?, 'SELL', ?, ?, ?, ?, datetime('now'), ?, ?)
        """, (symbol, price, usdt_amount, amount, fee, int(time.time()), CURRENT_MODE))
        
        db.execute("REPLACE INTO symbol_cooldown (symbol, last_closed_ts) VALUES (?, ?)", (symbol, int(time.time())))
        
        logger.info(f"‚úÖ Successfully recorded close for {symbol}: {amount:.6f} @ {price:.6f}, PnL: {pnl:+.2f} USDT ({pnl_percent:+.2f}%)")
        
    except Exception as e:
        logger.error(f"Error recording successful close for {symbol}: {e}")

def calculate_safe_sell_amount(symbol: str, available_balance: float, current_price: float) -> float:
    """–†–∞—Å—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è Bybit"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        min_amount = get_min_amount(symbol)
        min_order_value = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        amount = available_balance
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if amount < min_amount:
            logger.info(f"Available balance {amount:.6f} below min amount {min_amount:.6f}")
            return 0
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞
        order_value = amount * current_price
        if order_value < min_order_value:
            logger.info(f"Order value {order_value:.2f} below minimum {min_order_value:.2f}")
            return 0
            
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —à–∞–≥–∞
        amount = round_amount(symbol, amount)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        if amount < min_amount:
            logger.info(f"After rounding {amount:.6f} below min amount {min_amount:.6f}")
            return 0
            
        final_value = amount * current_price
        if final_value < min_order_value:
            logger.info(f"Final order value {final_value:.2f} below minimum {min_order_value:.2f}")
            return 0
            
        logger.info(f"‚úÖ Safe sell amount: {amount:.6f} (value: {final_value:.2f} USDT)")
        return amount
        
    except Exception as e:
        logger.error(f"Error calculating safe sell amount for {symbol}: {e}")
        return 0

def close_with_adjusted_amount(symbol: str, available_balance: float, current_price: float, reason: str) -> bool:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è Bybit"""
    try:
        base = symbol.split("/")[0]
        
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —É–º–µ–Ω—å—à–∞—é—â–∏–º—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        for attempt in range(3):
            try:
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
                adjustment_factor = 1.0 - (attempt * 0.1)  # 100%, 90%, 80%
                adjusted_amount = available_balance * adjustment_factor
                
                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —à–∞–≥–∞
                adjusted_amount = round_amount(symbol, adjusted_amount)
                
                if adjusted_amount <= 0:
                    continue
                    
                logger.info(f"üîÑ Attempt {attempt + 1}: trying amount {adjusted_amount:.6f}")
                
                order = exchange.create_market_sell_order(symbol, adjusted_amount)
                
                if order and order.get('id'):
                    logger.info(f"‚úÖ Successfully closed {symbol} with adjusted amount")
                    
                    # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                    time.sleep(2)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                    new_bal = fetch_balance()
                    new_base_balance = float(new_bal['free'].get(base, 0) or 0)
                    
                    if new_base_balance < available_balance - 0.000001:
                        filled_amount = available_balance - new_base_balance
                        record_successful_close(symbol, filled_amount, current_price, f"ADJUSTED_{reason}")
                    else:
                        mark_position_closed(symbol)
                        
                    return True
                    
            except ccxt.InsufficientFunds as e:
                logger.warning(f"üîÑ Insufficient funds on attempt {attempt + 1}, retrying...")
                continue
                
            except ccxt.InvalidOrder as e:
                logger.warning(f"üîÑ Invalid order on attempt {attempt + 1}, retrying...")
                continue
                
            except Exception as e:
                logger.warning(f"üîÑ Error on attempt {attempt + 1}: {e}, retrying...")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é
        logger.error(f"‚ùå All attempts failed for {symbol}, marking as closed")
        mark_position_closed(symbol)
        return True
            
    except Exception as e:
        logger.error(f"Error in close_with_adjusted_amount for {symbol}: {e}")
        mark_position_closed(symbol)
        return True

safe_close_position
# ====== EXIT CONDITIONS ======
def check_scalping_exit(symbol: str, pos: Dict):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    try:
        strategy_config = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ —Ç–∏–∫–µ—Ä (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
        current_price = get_current_price(symbol)
        if current_price is None:
            logger.warning(f"‚ùå Cannot get current price for {symbol}")
            return
            
        open_price = pos['open_price']
        stop_loss = pos['stop_loss']
        take_profit = pos['take_profit']
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
        logger.info(f"üîç {symbol}: Current={current_price:.6f}, Entry={open_price:.6f}")
        logger.info(f"üéØ {symbol}: SL={stop_loss:.6f}, TP={take_profit:.6f}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
        profit_pct = (current_price - open_price) / open_price * 100
        
        exit_reason = ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ (LONG/SHORT) –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ü–µ–Ω
        is_long_position = take_profit > open_price  # –ï—Å–ª–∏ TP –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ - —ç—Ç–æ LONG
        
        if is_long_position:
            # LONG –ø–æ–∑–∏—Ü–∏—è
            if current_price <= stop_loss:
                exit_reason = f"LONG SL {profit_pct:+.2f}%"
                logger.info(f"üî¥ {symbol}: LONG STOP LOSS! Price {current_price:.6f} <= SL {stop_loss:.6f}")
            elif current_price >= take_profit:
                exit_reason = f"LONG TP {profit_pct:+.2f}%"
                logger.info(f"üü¢ {symbol}: LONG TAKE PROFIT! Price {current_price:.6f} >= TP {take_profit:.6f}")
            elif profit_pct >= strategy_config['quick_exit'] * 100:  # quick_exit –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                exit_reason = f"QUICK EXIT {profit_pct:+.2f}%"
                logger.info(f"‚ö° {symbol}: QUICK EXIT! Profit {profit_pct:+.2f}% >= {strategy_config['quick_exit']*100:.2f}%")
        else:
            # SHORT –ø–æ–∑–∏—Ü–∏—è (–æ–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            if current_price >= stop_loss:
                exit_reason = f"SHORT SL {profit_pct:+.2f}%"
                logger.info(f"üî¥ {symbol}: SHORT STOP LOSS! Price {current_price:.6f} >= SL {stop_loss:.6f}")
            elif current_price <= take_profit:
                exit_reason = f"SHORT TP {profit_pct:+.2f}%"
                logger.info(f"üü¢ {symbol}: SHORT TAKE PROFIT! Price {current_price:.6f} <= TP {take_profit:.6f}")
        
        if exit_reason:
            logger.info(f"üö™ EXECUTING EXIT for {symbol}: {exit_reason}")
            if safe_close_position(symbol, exit_reason):
                logger.info(f"‚úÖ Successfully closed {symbol}")
            else:
                logger.error(f"‚ùå Failed to close {symbol}")
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if is_long_position:
                sl_distance_pct = ((current_price - stop_loss) / current_price) * 100
                tp_distance_pct = ((take_profit - current_price) / current_price) * 100
            else:
                sl_distance_pct = ((stop_loss - current_price) / current_price) * 100
                tp_distance_pct = ((current_price - take_profit) / current_price) * 100
                
            logger.info(f"üìä {symbol}: PnL={profit_pct:+.2f}%, to SL={sl_distance_pct:.2f}%, to TP={tp_distance_pct:.2f}%")
            
    except Exception as e:
        logger.error(f"‚ùå Scalping exit check error {symbol}: {e}")

def check_swing_exit(symbol: str, pos: Dict):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º get_current_settings() –≤–º–µ—Å—Ç–æ TRADING_MODES
        settings = get_current_settings()
        
        ohlcv = fetch_ohlcv(symbol, "15m", limit=20)
        if not ohlcv:
            logger.warning(f"‚ùå No OHLCV data for {symbol}")
            return
            
        df = pd.DataFrame(ohlcv, columns=['timestamp','open','high','low','close','volume']).astype(float)
        current_price = df['close'].iloc[-1]
        open_price = pos['open_price']
        stop_loss = pos['stop_loss']
        take_profit = pos['take_profit']
        max_price = pos.get('max_price', open_price)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"üîç {symbol}: Current={current_price:.6f}, Entry={open_price:.6f}")
        logger.info(f"üéØ {symbol}: SL={stop_loss:.6f}, TP={take_profit:.6f}, Max={max_price:.6f}")
        
        profit_pct = (current_price - open_price) / open_price * 100
        
        exit_reason = ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏
        is_long_position = take_profit > open_price
        
        if is_long_position:
            # LONG –ø–æ–∑–∏—Ü–∏—è
            if current_price <= stop_loss:
                exit_reason = f"SWING SL {profit_pct:+.2f}%"
                logger.info(f"üî¥ {symbol}: SWING STOP LOSS! Price {current_price:.6f} <= SL {stop_loss:.6f}")
            elif current_price >= take_profit:
                exit_reason = f"SWING TP {profit_pct:+.2f}%"
                logger.info(f"üü¢ {symbol}: SWING TAKE PROFIT! Price {current_price:.6f} >= TP {take_profit:.6f}")
            elif 'trailing_start' in settings and profit_pct >= settings['trailing_start'] * 100:
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ trailing –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                trailing_start = settings.get('trailing_start', 0.005)
                trailing_step = settings.get('trailing_step', 0.002)
                trail_level = max_price * (1 - trailing_step)
                if current_price <= trail_level:
                    exit_reason = f"TRAILING STOP {profit_pct:+.2f}%"
                    logger.info(f"üîÑ {symbol}: TRAILING STOP! Price {current_price:.6f} <= Trail {trail_level:.6f}")
            else:
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ max_stop_loss
                max_stop_loss_pct = settings.get('max_stop_loss', 0.01) * 100
                if profit_pct <= -max_stop_loss_pct * 1.5:
                    exit_reason = f"EMERGENCY EXIT {profit_pct:+.2f}%"
                    logger.info(f"üö® {symbol}: EMERGENCY EXIT! Loss {profit_pct:+.2f}%")
        else:
            # SHORT –ø–æ–∑–∏—Ü–∏—è
            if current_price >= stop_loss:
                exit_reason = f"SWING SL {profit_pct:+.2f}%"
                logger.info(f"üî¥ {symbol}: SWING STOP LOSS! Price {current_price:.6f} >= SL {stop_loss:.6f}")
            elif current_price <= take_profit:
                exit_reason = f"SWING TP {profit_pct:+.2f}%"
                logger.info(f"üü¢ {symbol}: SWING TAKE PROFIT! Price {current_price:.6f} <= TP {take_profit:.6f}")
        
        if exit_reason:
            logger.info(f"üö™ EXECUTING EXIT for {symbol}: {exit_reason}")
            if safe_close_position(symbol, exit_reason):
                logger.info(f"‚úÖ Successfully closed {symbol}")
            else:
                logger.error(f"‚ùå Failed to close {symbol}")
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            if is_long_position:
                sl_distance_pct = ((current_price - stop_loss) / current_price) * 100
                tp_distance_pct = ((take_profit - current_price) / current_price) * 100
            else:
                sl_distance_pct = ((stop_loss - current_price) / current_price) * 100
                tp_distance_pct = ((current_price - take_profit) / current_price) * 100
                
            logger.info(f"üìä {symbol}: PnL={profit_pct:+.2f}%, to SL={sl_distance_pct:.2f}%, to TP={tp_distance_pct:.2f}%")
            
    except Exception as e:
        logger.error(f"‚ùå Swing exit check error {symbol}: {e}")

def close_unprofitable_positions():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        positions = get_open_positions()
        if not positions:
            return
            
        logger.info(f"üîç Checking {len(positions)} positions for forced closing")
        
        closed_count = 0
        for symbol, pos in positions.items():
            try:
                current_price = get_current_price(symbol)
                if current_price is None:
                    continue
                    
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
                pnl_percent = (current_price - pos['open_price']) / pos['open_price'] * 100
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å —É–±—ã—Ç–∫–æ–º –±–æ–ª–µ–µ 2%
                if pnl_percent < -2.0:
                    logger.info(f"üî¥ Closing unprofitable position {symbol}: PnL {pnl_percent:.2f}%")
                    if safe_close_position(symbol, f"UNPROFITABLE {pnl_percent:.2f}%"):
                        closed_count += 1
                        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏
                        
            except Exception as e:
                logger.error(f"Error checking position {symbol}: {e}")
                continue
                
        if closed_count > 0:
            logger.info(f"‚úÖ Closed {closed_count} unprofitable positions")
            return True
        else:
            logger.info("‚úÖ No unprofitable positions to close")
            return False
            
    except Exception as e:
        logger.error(f"Error in close_unprofitable_positions: {e}")
        return False

def check_position_exits():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤"""
    positions = get_open_positions()
    logger.info(f"üîç Checking exits for {len(positions)} positions: {list(positions.keys())}")
    
    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏ –º–∞–ª–æ USDT, –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ
    available_usdt = compute_available_usdt()
    if len(positions) >= 5 and available_usdt < 10.0:
        logger.warning(f"‚ö†Ô∏è Too many positions ({len(positions)}) with low USDT ({available_usdt:.2f}), closing some...")
        close_unprofitable_positions()
        return
    
    # –¢–ï–°–¢–ò–†–£–ï–ú –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    try:
        settings = get_current_settings()
        logger.info(f"‚úÖ Exit check settings: max_stop_loss={settings.get('max_stop_loss')}, take_profit={settings.get('take_profit')}")
    except Exception as e:
        logger.error(f"‚ùå Failed to get settings for exit check: {e}")
        return
    
    for symbol, pos in positions.items():
        try:
            logger.info(f"üìä Analyzing {symbol}: mode={pos.get('trading_mode')}, entry={pos['open_price']}")
            
            if pos.get('trading_mode') == 'SCALPING':
                check_scalping_exit(symbol, pos)
            else:
                check_swing_exit(symbol, pos)
                
        except Exception as e:
            logger.error(f"‚ùå Exit check error {symbol}: {e}")

def update_max_price_db(symbol: str, price: float):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    db.execute("UPDATE positions SET max_price=? WHERE symbol=? AND status='OPEN'", (price, symbol))

# ====== COOLDOWN AND LIMITS ======
def is_in_cooldown(symbol: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–¥–æ—É–Ω–∞ —Å –ø–æ–ª–Ω—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if CURRENT_MODE == "SCALPING":
            cooldown_period = SCALPING_GLOBAL.get('cooldown', 15)
        else:
            settings = TRADING_MODES.get(CURRENT_MODE, TRADING_MODES["CONSERVATIVE"])
            cooldown_period = settings.get('cooldown', 300)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        row = db.fetchone("SELECT last_closed_ts FROM symbol_cooldown WHERE symbol=?", (symbol,))
        
        if not row or not row[0] or row[0] == 0:
            return False  # –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –∫—É–¥–æ—É–Ω–µ
            
        last_closed = int(row[0])
        current_time = int(time.time())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ –∫—É–¥–æ—É–Ω
        time_since_last = current_time - last_closed
        is_in_cooldown = time_since_last < cooldown_period
        
        if is_in_cooldown:
            remaining = cooldown_period - time_since_last
            logger.debug(f"Symbol {symbol} in cooldown, {remaining}s remaining")
        else:
            logger.debug(f"Symbol {symbol} cooldown finished")
            
        return is_in_cooldown
        
    except Exception as e:
        logger.error(f"Error checking cooldown for {symbol}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        return False

def check_daily_trade_limit(symbol: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ trades —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        if CURRENT_MODE == "SCALPING":
            max_daily_trades = SCALPING_GLOBAL.get('max_daily_trades_per_symbol', 25)
        else:
            settings = TRADING_MODES.get(CURRENT_MODE, TRADING_MODES["CONSERVATIVE"])
            max_daily_trades = settings.get('max_daily_trades_per_symbol', 5)
        
        today = datetime.now().strftime('%Y-%m-%d')
        
        row = db.fetchone("SELECT daily_trade_count, last_trade_date FROM symbol_cooldown WHERE symbol=?", (symbol,))
        
        if not row:
            return True  # –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π - –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
            
        daily_count, last_date = row
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if last_date != today:
            db.execute("UPDATE symbol_cooldown SET daily_trade_count=0, last_trade_date=? WHERE symbol=?", (today, symbol))
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
        return daily_count < max_daily_trades
        
    except Exception as e:
        logger.error(f"Error checking daily trade limit for {symbol}: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é

def update_daily_trade_count(symbol: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö trades"""
    today = datetime.now().strftime('%Y-%m-%d')
    
    row = db.fetchone("SELECT daily_trade_count, last_trade_date FROM symbol_cooldown WHERE symbol=?", (symbol,))
    
    if not row:
        db.execute("INSERT INTO symbol_cooldown (symbol, daily_trade_count, last_trade_date) VALUES (?, 1, ?)", (symbol, today))
    else:
        daily_count, last_date = row
        if last_date == today:
            db.execute("UPDATE symbol_cooldown SET daily_trade_count=daily_trade_count+1 WHERE symbol=?", (symbol,))
        else:
            db.execute("UPDATE symbol_cooldown SET daily_trade_count=1, last_trade_date=? WHERE symbol=?", (today, symbol))

def compute_equity() -> float:
    """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞"""
    bal = fetch_balance()
    if not bal:
        return 0.0
        
    usdt_free = float(bal['free'].get('USDT', 0) or 0)
    total = usdt_free
    
    positions = get_open_positions()
    for symbol, pos in positions.items():
        try:
            ticker = exchange.fetch_ticker(symbol)
            current_price = float(ticker['last'])
            total += pos['base_amount'] * current_price
        except Exception as e:
            logger.error(f"Error calculating equity for {symbol}: {e}")
            continue
            
    return total

def get_concurrent_trades_count() -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö trades"""
    row = db.fetchone("SELECT COUNT(*) FROM positions WHERE status='OPEN'")
    return row[0] if row else 0

def can_open_new_trade() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ trade —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    try:
        settings = get_current_settings()
        max_trades = settings.get('max_trades', 5)
        current_trades = get_concurrent_trades_count()
        
        can_open = current_trades < max_trades
        
        if not can_open:
            logger.debug(f"Cannot open new trade: {current_trades}/{max_trades} positions open")
            
        return can_open
        
    except Exception as e:
        logger.error(f"Error in can_open_new_trade: {e}")
        return False  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–µ—â–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫

# ====== SCALPING FUNCTIONS ======
def check_scalping_daily_limits() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    today = datetime.now().strftime('%Y-%m-%d')
    
    row = db.fetchone("SELECT daily_pnl, total_trades, consecutive_losses FROM daily_limits WHERE date=?", (today,))
    
    if not row:
        db.execute("INSERT INTO daily_limits (date, daily_pnl, total_trades, consecutive_losses) VALUES (?, 0, 0, 0)", (today,))
        return True
    
    daily_pnl, total_trades, consecutive_losses = row
    
    if daily_pnl >= SCALPING_GLOBAL['profit_target_daily']:
        logger.info(f"Daily profit target reached: {daily_pnl:.2%}")
        return False
    
    if daily_pnl <= SCALPING_GLOBAL['loss_limit_daily']:
        logger.info(f"Daily loss limit reached: {daily_pnl:.2%}")
        return False
    
    if consecutive_losses >= SCALPING_GLOBAL['max_consecutive_losses']:
        logger.info(f"Max consecutive losses reached: {consecutive_losses}")
        return False
    
    return True

def update_scalping_daily_pnl(pnl_percent: float):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ PnL –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    today = datetime.now().strftime('%Y-%m-%d')
    
    row = db.fetchone("SELECT daily_pnl, consecutive_losses FROM daily_limits WHERE date=?", (today,))
    
    if row:
        current_pnl, current_losses = row
        new_pnl = current_pnl + pnl_percent
        
        if pnl_percent > 0:
            db.execute("UPDATE daily_limits SET daily_pnl=?, consecutive_losses=0 WHERE date=?", (new_pnl, today))
        else:
            new_losses = current_losses + 1
            db.execute("UPDATE daily_limits SET daily_pnl=?, consecutive_losses=? WHERE date=?", (new_pnl, new_losses, today))

# ====== POSITION CLEANUP ======
def cleanup_duplicate_positions():
    """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        rows = db.fetchall("""
            SELECT symbol, COUNT(*) as cnt 
            FROM positions 
            WHERE status='OPEN' 
            GROUP BY symbol 
            HAVING cnt > 1
        """)
        
        cleaned_count = 0
        for row in rows:
            symbol, count = row
            logger.warning(f"Found {count} open positions for {symbol}, cleaning...")
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            db.execute("""
                UPDATE positions SET status='CLOSED', close_time=datetime('now'), exit_reason='DUPLICATE_CLEANUP'
                WHERE symbol=? AND status='OPEN' AND id NOT IN (
                    SELECT id FROM positions 
                    WHERE symbol=? AND status='OPEN' 
                    ORDER BY open_time DESC 
                    LIMIT 1
                )
            """, (symbol, symbol))
            
            cleaned_count += (count - 1)
        
        if cleaned_count > 0:
            logger.info(f"Cleaned {cleaned_count} duplicate positions")
        
        return cleaned_count
        
    except Exception as e:
        logger.error(f"Error cleaning duplicate positions: {e}")
        return 0

def import_existing_positions():
    """–ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    logger.info("Importing existing positions from exchange...")
    
    try:
        balance = fetch_balance()
        imported_count = 0
        
        current_positions = get_open_positions()
        
        for symbol in active_symbols:
            base_currency = symbol.split('/')[0]
            base_balance = float(balance.get('total', {}).get(base_currency, 0) or 0)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
            if base_balance <= 0:
                continue
                
            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if symbol in current_positions:
                logger.debug(f"Position {symbol} already in database, skipping import")
                continue
            
            try:
                ticker = exchange.fetch_ticker(symbol)
                current_price = float(ticker['last'])
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ)
                open_price = current_price
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                strategy_config = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
                stop_loss = open_price * (1 - strategy_config['max_stop_loss'])
                take_profit = open_price * (1 + strategy_config['take_profit'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
                order_value = base_balance * current_price
                min_order_value = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
                
                if order_value < min_order_value:
                    logger.info(f"Skipping {symbol}: order value {order_value:.2f} < min {min_order_value:.2f}")
                    continue
                
                record_open_position(symbol, base_balance, open_price, stop_loss, take_profit, CURRENT_SCALPING_STRATEGY)
                imported_count += 1
                logger.info(f"Imported position: {symbol} - {base_balance:.6f} @ {open_price:.6f}")
                
            except Exception as e:
                logger.error(f"Error importing position for {symbol}: {e}")
                continue
        
        logger.info(f"Import completed: {imported_count} new positions imported")
        return imported_count
        
    except Exception as e:
        logger.error(f"Error importing existing positions: {e}")
        return 0

def sync_balance_before_close(symbol: str) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏
        bal = fetch_balance()
        base = symbol.split("/")[0]
        real_balance = float(bal['free'].get(base, 0) or 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        position = get_position_info(symbol)
        if not position:
            return False
            
        db_balance = position['base_amount']
        
        logger.info(f"üîÑ Balance sync for {symbol}: DB={db_balance:.6f}, Real={real_balance:.6f}")
        
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å—ã —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
        if abs(real_balance - db_balance) > 0.000001:
            logger.warning(f"üìä Balance mismatch for {symbol}: updating DB {db_balance:.6f} -> {real_balance:.6f}")
            db.execute("UPDATE positions SET base_amount=? WHERE symbol=? AND status='OPEN'", 
                      (real_balance, symbol))
            return True
            
        return real_balance > 0
        
    except Exception as e:
        logger.error(f"Error syncing balance for {symbol}: {e}")
        return False

def auto_sync_positions():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        positions = get_open_positions()
        if not positions:
            return
            
        logger.info(f"üîÑ Auto-syncing {len(positions)} positions on startup")
        
        for symbol in positions.keys():
            sync_balance_before_close(symbol)
            
        logger.info("‚úÖ Auto-sync completed")
        
    except Exception as e:
        logger.error(f"Error in auto-sync: {e}")

# ====== TELEGRAM COMMANDS ======
def start(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞"""
    welcome_msg = """
ü§ñ <b>UNIVERSAL TRADING BOT</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:</b>
üü¢ <b>–ê–ì–†–ï–°–°–ò–í–ù–´–ô</b> - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫
üü° <b>–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô</b> - –ú–µ–Ω—å—à–µ —Å–¥–µ–ª–æ–∫, –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ
üî¥ <b>–°–ö–ê–õ–¨–ü–ò–ù–ì</b> - –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/close SYMBOL - –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
/close_all - –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
/close_unprofitable - –ó–∞–∫—Ä—ã—Ç—å —É–±—ã—Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/mode - –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º!
    """
    update.message.reply_text(welcome_msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard())

def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üü¢ –ê–ì–†–ï–°–°–ò–í–ù–´–ô":
        switch_mode("AGGRESSIVE", update)
    elif text == "üü° –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô":
        switch_mode("CONSERVATIVE", update)
    elif text == "üî¥ –°–ö–ê–õ–¨–ü–ò–ù–ì":
        show_scalping_menu(update)
    elif text == "üìä –°–¢–ê–¢–£–°":
        cmd_status(update, context)
    elif text == "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê":
        cmd_stats(update, context)
    elif text == "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò":
        show_settings_menu(update)
    elif text in ["üéØ BB Squeeze", "üöÄ EMA Momentum", "üìä VWAP Bounce", "üí• Breakout"]:
        handle_scalping_strategy(text, update)
    elif text == "üîô –ù–ê–ó–ê–î":
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    elif text == "üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø":
        cmd_force_sync(update, context)
    elif text == "üì• –ò–ú–ü–û–†–¢":
        cmd_import(update, context)
    elif text == "üîß –î–ï–ë–ê–ì":
        cmd_debug_settings(update, context)

def switch_mode(mode: str, update):
    """–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Å–±—Ä–æ—Å–æ–º –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global CURRENT_MODE, _settings_cache
    
    # –°–ë–†–ê–°–´–í–ê–ï–ú –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    _settings_cache = {}
    
    CURRENT_MODE = mode
    
    mode_info = TRADING_MODES[mode]
    msg = f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: <b>{mode_info['name']}</b>\n\n"
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_current_settings()
    
    if mode == "SCALPING":
        msg += f"üìä –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>{SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]['name']}</b>\n"
        msg += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {settings['scan_interval']}—Å\n"
        msg += f"üî¢ –ú–∞–∫—Å —Å–¥–µ–ª–æ–∫: {settings['max_trades']}\n"
        msg += f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {settings['trade_pct']*100}%"
        update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_scalping_keyboard())
    else:
        msg += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {settings['scan_interval']}—Å\n"
        msg += f"üî¢ –ú–∞–∫—Å —Å–¥–µ–ª–æ–∫: {settings['max_trades']}\n"
        msg += f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {settings['trade_pct']*100}%\n"
        msg += f"üéØ TP/SL: +{settings['take_profit']*100:.1f}%/ -{settings['max_stop_loss']*100:.1f}%\n"
        msg += f"üìä RSI –¥–∏–∞–ø–∞–∑–æ–Ω: {settings['rsi_min']}-{settings['rsi_max']}"
        update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard())

def show_scalping_menu(update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    global CURRENT_MODE
    CURRENT_MODE = "SCALPING"
    
    current_strategy = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
    
    msg = f"üî¥ <b>–†–ï–ñ–ò–ú –°–ö–ê–õ–¨–ü–ò–ù–ì–ê</b>\n\n"
    msg += f"üìä –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>{current_strategy['name']}</b>\n"
    msg += f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {current_strategy['timeframe_entry']}\n"
    msg += f"üéØ TP/SL: +{current_strategy['take_profit']*100:.1f}%/ -{current_strategy['max_stop_loss']*100:.1f}%\n"
    msg += f"üî¢ –ú–∞–∫—Å —Å–¥–µ–ª–æ–∫: {current_strategy['max_trades']}\n\n"
    msg += "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞:"
    
    update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_scalping_keyboard())

def handle_scalping_strategy(text: str, update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    global CURRENT_SCALPING_STRATEGY
    
    strategy_map = {
        "üéØ BB Squeeze": "BB_SQUEEZE",
        "üöÄ EMA Momentum": "EMA_MOMENTUM", 
        "üìä VWAP Bounce": "VWAP_BOUNCE",
        "üí• Breakout": "BREAKOUT"
    }
    
    if text in strategy_map:
        CURRENT_SCALPING_STRATEGY = strategy_map[text]
        strategy_config = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
        
        msg = f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: <b>{strategy_config['name']}</b>\n\n"
        msg += f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {strategy_config['timeframe_entry']}\n"
        msg += f"üéØ TP: +{strategy_config['take_profit']*100:.1f}% | SL: -{strategy_config['max_stop_loss']*100:.1f}%\n"
        msg += f"‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥: +{strategy_config['quick_exit']*100:.1f}%\n"
        msg += f"üìä RSI –¥–∏–∞–ø–∞–∑–æ–Ω: {strategy_config['rsi_range'][0]}-{strategy_config['rsi_range'][1]}\n"
        msg += f"üî¢ –ú–∞–∫—Å —Å–¥–µ–ª–æ–∫: {strategy_config['max_trades']}\n"
        msg += f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {strategy_config['trade_pct']*100}%"
        
        update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_scalping_keyboard())

def show_settings_menu(update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    msg = "‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê</b>\n\n"
    msg += "üîÑ <b>–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø</b> - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ë–î\n"
    msg += "üì• <b>–ò–ú–ü–û–†–¢</b> - –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π\n"
    msg += "üîß <b>–î–ï–ë–ê–ì</b> - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
    msg += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_settings_keyboard())
def unrealized_pnl_total() -> float:
    """–û–±—â–∏–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º"""
    total = 0.0
    try:
        positions = get_open_positions()
        for sym, pos in positions.items():
            current_price = get_current_price(sym)
            if current_price and pos['open_price'] > 0:
                current_value = current_price * pos['base_amount']
                open_value = pos['open_price'] * pos['base_amount']
                total += (current_value - open_value)
    except Exception as e:
        logger.error(f"Unrealized PnL error: {e}")
    return total

def cmd_status(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        equity = compute_equity()
        realized = realized_pnl_total()
        unrealized = unrealized_pnl_total()
        positions = get_open_positions()
        stats = get_trading_stats()
        settings = get_current_settings()
        
        total_pnl = realized + unrealized
        pnl_color = "üü¢" if total_pnl >= 0 else "üî¥"
        
        current_mode_info = TRADING_MODES[CURRENT_MODE]
        
        msg = f"üìä <b>UNIVERSAL TRADING BOT</b>\n\n"
        msg += f"üéØ <b>–†–µ–∂–∏–º:</b> {current_mode_info['name']}\n"
        
        if CURRENT_MODE == "SCALPING":
            msg += f"üìà <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]['name']}\n"
        
        msg += f"üí∞ <b>–ö–∞–ø–∏—Ç–∞–ª:</b> {equity:.2f} USDT\n"
        msg += f"üìà <b>P&L:</b> {pnl_color} {total_pnl:+.2f} USDT "
        msg += f"(–†–µ–∞–ª–∏–∑: {realized:+.2f} | –ù–µ—Ä–µ–∞–ª–∏–∑: {unrealized:+.2f})\n"
        msg += f"üî¢ <b>–ü–æ–∑–∏—Ü–∏–∏:</b> {len(positions)}/{settings['max_trades']}\n\n"
        
        bal = fetch_balance()
        usdt_free = float(bal.get('free', {}).get('USDT', 0) or 0)
        
        if positions:
            msg += f"üìà <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ({len(positions)}):</b>\n"
            for sym in positions.keys():
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                    avg_position = calculate_weighted_average_position(sym)
                    if not avg_position:
                        continue
                        
                    current_price = get_current_price(sym)
                    if not current_price:
                        continue
                    
                    total_amount = avg_position['base_amount']
                    avg_open_price = avg_position['open_price']
                    position_count = avg_position.get('position_count', 1)
                    
                    profit = (current_price - avg_open_price) / avg_open_price * 100
                    profit_net = profit - ROUNDTRIP_FEE * 100
                    
                    position_value = current_price * total_amount
                    
                    emoji = "üü¢" if profit_net > 0 else "üî¥"
                    base_currency = sym.split('/')[0]
                    
                    msg += f"{emoji} <b>{sym}</b> [{CURRENT_MODE}]"
                    if position_count > 1:
                        msg += f" (x{position_count})"
                    msg += f"\n"
                    msg += f"   –ö–æ–ª-–≤–æ: {total_amount:.4f} {base_currency}\n"
                    msg += f"   –°—Ä.–≤—Ö–æ–¥: {avg_open_price:.6f} | –¢–µ–∫—É—â: {current_price:.6f}\n"
                    msg += f"   P&L: {profit_net:+.2f}% | –°—Ç–æ–∏–º–æ—Å—Ç—å: {position_value:.2f} USDT\n"
                    
                except Exception as e:
                    logger.error(f"Error processing position {sym}: {e}")
                    msg += f"‚ùå <b>{sym}</b> - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"
        else:
            msg += "üì≠ <b>–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n"
        
        msg += f"\nüí∏ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {usdt_free:.2f} USDT"
        
        if update and hasattr(update, 'message'):
            update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard())
        else:
            safe_send(msg)
        
    except Exception as e:
        logger.error(f"Error in cmd_status: {e}")
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        if update and hasattr(update, 'message'):
            update.message.reply_text(error_msg)
        else:
            safe_send(error_msg)

def realized_pnl_total() -> float:
    """–û–±—â–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL"""
    try:
        row = db.fetchone("SELECT SUM(pnl) FROM positions WHERE status='CLOSED' AND pnl IS NOT NULL")
        return float(row[0]) if row and row[0] is not None else 0.0
    except Exception as e:
        logger.error(f"Realized PnL error: {e}")
        return 0.0

def realized_pnl_total() -> float:
    """–û–±—â–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º"""
    try:
        row = db.fetchone("""
            SELECT SUM(pnl) 
            FROM positions 
            WHERE status='CLOSED' AND pnl IS NOT NULL
        """)
        return float(row[0]) if row and row[0] is not None else 0.0
    except Exception as e:
        logger.error(f"Realized PnL error: {e}")
        return 0.0


def get_trading_stats() -> Dict[str, Any]:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ trading —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–¥–µ–ª–∫–∞–º
        stats_row = db.fetchone("""
            SELECT 
                COUNT(*) as total_trades,
                SUM(usdt_amount) as total_volume,
                SUM(fee) as total_fees
            FROM trade_history
        """)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º
        trades_row = db.fetchone("""
            SELECT 
                COUNT(*) as closed_trades,
                SUM(CASE WHEN pnl > 0 THEN 1 ELSE 0 END) as winning_trades,
                AVG(CASE WHEN pnl > 0 THEN pnl_percent ELSE NULL END) as avg_win_pct,
                AVG(CASE WHEN pnl <= 0 THEN pnl_percent ELSE NULL END) as avg_loss_pct,
                SUM(pnl) as total_pnl,
                SUM(base_amount * open_price) as total_invested
            FROM positions 
            WHERE status='CLOSED' AND pnl IS NOT NULL
        """)
        
        total_pnl = float(trades_row[4]) if trades_row and trades_row[4] else 0.0
        total_invested = float(trades_row[5]) if trades_row and trades_row[5] else 0.0
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        total_return = (total_pnl / total_invested * 100) if total_invested > 0 else 0
        
        stats = {
            'total_trades': stats_row[0] if stats_row else 0,
            'total_volume': float(stats_row[1]) if stats_row and stats_row[1] else 0,
            'total_fees': float(stats_row[2]) if stats_row and stats_row[2] else 0,
            'closed_trades': trades_row[0] if trades_row else 0,
            'winning_trades': trades_row[1] if trades_row else 0,
            'avg_win_pct': float(trades_row[2]) if trades_row and trades_row[2] else 0,
            'avg_loss_pct': float(trades_row[3]) if trades_row and trades_row[3] else 0,
            'total_pnl': total_pnl,
            'total_return': total_return,
            'total_invested': total_invested
        }
        
        return stats
        
    except Exception as e:
        logger.error(f"Stats error: {e}")
        return {
            'total_trades': 0,
            'total_volume': 0,
            'total_fees': 0,
            'closed_trades': 0,
            'winning_trades': 0,
            'avg_win_pct': 0,
            'avg_loss_pct': 0,
            'total_pnl': 0,
            'total_return': 0,
            'total_invested': 0
        }

def cmd_stats(update, context):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
    stats = get_trading_stats()
    equity = compute_equity()
    realized = realized_pnl_total()
    unrealized = unrealized_pnl_total()
    
    msg = f"üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    
    closed_trades = stats.get('closed_trades', 0)
    if closed_trades > 0:
        winning_trades = stats.get('winning_trades', 0)
        win_rate = (winning_trades / closed_trades) * 100
        
        msg += f"üìä <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
        msg += f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}% ({winning_trades}/{closed_trades})\n"
        msg += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {stats.get('avg_win_pct', 0):.2f}%\n"
        msg += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {stats.get('avg_loss_pct', 0):.2f}%\n"
        msg += f"‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats.get('total_return', 0):.2f}%\n"
        msg += f"‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: {stats.get('total_pnl', 0):.2f} USDT\n"
        msg += f"‚Ä¢ –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: {unrealized:+.2f} USDT\n"
        msg += f"‚Ä¢ –û–±—â–∏–π P&L: {realized + unrealized:+.2f} USDT\n"
        msg += f"‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}\n"
        msg += f"‚Ä¢ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {stats['total_volume']:.0f} USDT\n"
        msg += f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: {stats.get('total_fees', 0):.2f} USDT\n\n"
    else:
        msg += f"üìä <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
        msg += f"‚Ä¢ –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
    
    # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_current_settings()
    current_mode_info = TRADING_MODES[CURRENT_MODE]
    
    msg += f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    msg += f"‚Ä¢ –†–µ–∂–∏–º: {current_mode_info['name']}\n"
    
    if CURRENT_MODE == "SCALPING":
        strategy_config = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
        msg += f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_config['name']}\n"
        msg += f"‚Ä¢ TP/SL: +{strategy_config['take_profit']*100:.1f}%/ -{strategy_config['max_stop_loss']*100:.1f}%\n"
        msg += f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {strategy_config['trade_pct']*100}%\n"
    else:
        take_profit = settings.get('take_profit', 0.02)
        max_stop_loss = settings.get('max_stop_loss', 0.01)
        trade_pct = settings.get('trade_pct', 0.1)
        
        msg += f"‚Ä¢ TP/SL: +{take_profit*100:.1f}%/ -{max_stop_loss*100:.1f}%\n"
        msg += f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {trade_pct*100}%\n"
        msg += f"‚Ä¢ RSI –¥–∏–∞–ø–∞–∑–æ–Ω: {settings.get('rsi_min', 40)}-{settings.get('rsi_max', 65)}\n"
    
    update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard())

def cmd_close(update, context):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        if not context.args:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /close SYMBOL")
            return
            
        symbol = context.args[0].upper() + "/USDT" if "/" not in context.args[0].upper() else context.args[0].upper()
        if safe_close_position(symbol, "Manual"):
            update.message.reply_text(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ {symbol}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

def cmd_close_all(update, context):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        positions = get_open_positions()
        if not positions:
            update.message.reply_text("‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return
            
        msg = f"üö™ –ó–∞–∫—Ä—ã–≤–∞—é {len(positions)} –ø–æ–∑–∏—Ü–∏–π:\n"
        for symbol in positions.keys():
            msg += f"‚Ä¢ {symbol}\n"
        
        update.message.reply_text(msg)
        
        closed_count = 0
        failed_count = 0
        
        for symbol in list(positions.keys()):
            if safe_close_position(symbol, "FORCED CLOSE ALL"):
                closed_count += 1
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏
            else:
                failed_count += 1
        
        result_msg = f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è:\n"
        result_msg += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {closed_count}\n"
        result_msg += f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}\n"
        result_msg += f"‚Ä¢ –í—Å–µ–≥–æ: {len(positions)}"
        
        update.message.reply_text(result_msg)
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def cmd_close_unprofitable(update, context):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        if close_unprofitable_positions():
            update.message.reply_text("‚úÖ –£–±—ã—Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
        else:
            update.message.reply_text("‚úÖ –ù–µ—Ç —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def cmd_force_sync(update, context):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        positions = get_open_positions()
        if not positions:
            update.message.reply_text("‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return
            
        synced_count = 0
        closed_count = 0
        
        for symbol in positions.keys():
            if sync_balance_before_close(symbol):
                synced_count += 1
            else:
                # –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                mark_position_closed(symbol)
                closed_count += 1
                
        msg = f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        msg += f"‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {synced_count} –ø–æ–∑–∏—Ü–∏–π\n"
        msg += f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ): {closed_count} –ø–æ–∑–∏—Ü–∏–π\n"
        msg += f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(positions)} –ø–æ–∑–∏—Ü–∏–π"
        
        update.message.reply_text(msg)
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")

def cmd_import(update, context):
    """–ò–º–ø–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–π"""
    imported_count = import_existing_positions()
    if imported_count > 0:
        update.message.reply_text(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –ø–æ–∑–∏—Ü–∏–π", reply_markup=get_main_keyboard())
    else:
        update.message.reply_text("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", reply_markup=get_main_keyboard())

def cmd_debug_settings(update, context):
    """–û—Ç–ª–∞–¥–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        settings = get_current_settings()
        
        msg = f"‚öôÔ∏è <b>–¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò</b>\n\n"
        msg += f"üéØ <b>–†–µ–∂–∏–º:</b> {CURRENT_MODE}\n"
        
        if CURRENT_MODE == "SCALPING":
            msg += f"üìä <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {settings['name']}\n"
        
        msg += f"\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        msg += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {settings['scan_interval']}—Å\n"
        msg += f"‚Ä¢ –ú–∞–∫—Å —Å–¥–µ–ª–æ–∫: {settings['max_trades']}\n"
        msg += f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {settings['trade_pct']*100}%\n"
        
        msg += f"\n<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã—Ö–æ–¥–∞:</b>\n"
        msg += f"‚Ä¢ Stop Loss: {settings.get('max_stop_loss', 'N/A')*100:.1f}%\n"
        msg += f"‚Ä¢ Take Profit: {settings.get('take_profit', 'N/A')*100:.1f}%\n"
        msg += f"‚Ä¢ Trailing Start: {settings.get('trailing_start', 'N/A')*100:.1f}%\n"
        msg += f"‚Ä¢ Trailing Step: {settings.get('trailing_step', 'N/A')*100:.1f}%\n"
        
        msg += f"\n<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥–∞:</b>\n"
        msg += f"‚Ä¢ RSI –¥–∏–∞–ø–∞–∑–æ–Ω: {settings.get('rsi_min', 'N/A')}-{settings.get('rsi_max', 'N/A')}\n"
        msg += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score: {settings.get('min_score', 'N/A')}\n"
        msg += f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞: {settings.get('volume_multiplier', 'N/A')}x\n"
        
        update.message.reply_text(msg, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

def cmd_cleanup_duplicates(update, context):
    """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        cleaned_count = cleanup_duplicate_positions()
        if cleaned_count > 0:
            update.message.reply_text(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π")
        else:
            update.message.reply_text("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

# ====== SWING TRADING LOGIC ======
def get_trend_direction(df: pd.DataFrame) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
    if df is None or len(df) < 50:
        return "SIDEWAYS"
    
    try:
        ema_fast = EMAIndicator(df['close'], window=9).ema_indicator()
        ema_slow = EMAIndicator(df['close'], window=21).ema_indicator()
        ema_trend = EMAIndicator(df['close'], window=50).ema_indicator()
        
        if len(ema_fast) < 5 or len(ema_slow) < 5 or len(ema_trend) < 5:
            return "SIDEWAYS"
            
        price = df['close'].iloc[-1]
        fast_ema = ema_fast.iloc[-1]
        slow_ema = ema_slow.iloc[-1]
        trend_ema = ema_trend.iloc[-1]
        
        ema_alignment = (price > fast_ema > slow_ema > trend_ema) or (price < fast_ema < slow_ema < trend_ema)
        ema_slope = (ema_fast.iloc[-1] - ema_fast.iloc[-5]) / ema_fast.iloc[-5] if ema_fast.iloc[-5] != 0 else 0
        
        if ema_alignment and abs(ema_slope) > 0.001:
            if price > fast_ema and ema_slope > 0:
                return "BULLISH"
            elif price < fast_ema and ema_slope < 0:
                return "BEARISH"
        
        return "SIDEWAYS"
        
    except Exception as e:
        logger.error(f"Error calculating trend direction: {e}")
        return "SIDEWAYS"

def calculate_swing_signals(df: pd.DataFrame) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    settings = get_current_settings()
    
    if df is None or len(df) < 30:
        return {'score': 0, 'error': 'Insufficient data', 'trend': 'UNKNOWN'}
    
    try:
        current_price = df['close'].iloc[-1]
        current_volume = df['volume'].iloc[-1]
        volume_sma = df['volume'].tail(20).mean()
        
        # RSI
        rsi = RSIIndicator(df['close'], window=14).rsi().iloc[-1]
        rsi_prev = RSIIndicator(df['close'], window=14).rsi().iloc[-2] if len(df) > 1 else rsi
        
        # MACD
        macd_line = MACD(df['close']).macd().iloc[-1]
        macd_signal = MACD(df['close']).macd_signal().iloc[-1]
        macd_bullish = macd_line > macd_signal
        
        # ADX
        adx = 0
        adx_bullish = False
        adx_strong = False
        if len(df) >= 15:
            try:
                adx_indicator = ADXIndicator(df['high'], df['low'], df['close'], window=14)
                adx = adx_indicator.adx().iloc[-1]
                plus_di = adx_indicator.adx_pos().iloc[-1]
                minus_di = adx_indicator.adx_neg().iloc[-1]
                adx_bullish = plus_di > minus_di
                adx_strong = adx >= settings.get('adx_min', 15)  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
            except Exception as e:
                logger.warning(f"ADX calculation error: {e}")
        
        # Bollinger Bands
        bb = BollingerBands(df['close'], window=20, window_dev=2)
        bb_upper = bb.bollinger_hband().iloc[-1]
        bb_lower = bb.bollinger_lband().iloc[-1]
        bb_position = (current_price - bb_lower) / (bb_upper - bb_lower) if bb_upper != bb_lower else 0.5
        
        # Stochastic
        stoch = StochasticOscillator(df['high'], df['low'], df['close'], window=14, smooth_window=3).stoch().iloc[-1]
        
        # Volume analysis
        volume_ratio = current_volume / volume_sma if volume_sma > 0 else 1
        volume_ok = volume_ratio > settings.get('volume_multiplier', 1.2)
        
        # RSI –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
        rsi_min = settings.get('rsi_min', 40)
        rsi_max = settings.get('rsi_max', 65)
        rsi_ok = rsi_min <= rsi <= rsi_max
        
        signals = {
            'price': current_price,
            'volume_ok': volume_ok,
            'volume_ratio': volume_ratio,
            'rsi_ok': rsi_ok,
            'rsi_value': rsi,
            'rsi_trend': 'BULLISH' if rsi > rsi_prev else 'BEARISH',
            'macd_bullish': macd_bullish,
            'adx_strong': adx_strong,
            'adx_value': adx,
            'adx_bullish': adx_bullish,
            'bb_position': bb_position,
            'bb_signal': 0.2 <= bb_position <= 0.8,
            'stoch_ok': 20 <= stoch <= 80,
            'stoch_value': stoch,
            'score': 0,
            'trend': 'UNKNOWN'
        }
        
        # Scoring system
        score = 0
        
        # RSI scoring (30%)
        if signals['rsi_ok']:
            score += 30
            if signals['rsi_trend'] == 'BULLISH':
                score += 5
        elif rsi < 30:
            score += 15  # Oversold but outside range
        elif rsi > 70:
            score += 10  # Overbought but outside range
            
        # Volume scoring (20%)
        if volume_ok:
            score += 20
        elif volume_ratio > 0.8:
            score += 10
            
        # MACD scoring (15%)
        if macd_bullish:
            score += 15
            
        # ADX scoring (15%)
        if signals['adx_strong']:
            score += 15
            if signals['adx_bullish']:
                score += 5
                
        # Bollinger Bands scoring (10%)
        if signals['bb_signal']:
            score += 10
        elif bb_position < 0.2:
            score += 5  # Near lower band
            
        # Stochastic scoring (10%)
        if signals['stoch_ok']:
            score += 10
            
        signals['score'] = score
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            signals['trend'] = get_trend_direction(df)
        except Exception as e:
            logger.warning(f"Error calculating trend for signal: {e}")
            signals['trend'] = 'UNKNOWN'
        
        return signals
        
    except Exception as e:
        logger.error(f"Error calculating swing signals: {e}")
        return {'score': 0, 'error': str(e), 'trend': 'UNKNOWN'}

def should_enter_swing_position(symbol: str) -> Tuple[bool, Dict]:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–≤–∏–Ω–≥-–ø–æ–∑–∏—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not can_open_new_trade():
            return False, {'reason': 'Max trades reached'}
            
        if is_in_cooldown(symbol):
            return False, {'reason': 'Cooldown active'}
            
        if not check_daily_trade_limit(symbol):
            return False, {'reason': 'Daily limit reached'}
            
        df = get_ohlcv_data(symbol, "15m", 100)
        if df is None:
            return False, {'reason': 'No data'}
            
        signals = calculate_swing_signals(df)
        
        # –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ min_score
        settings = get_current_settings()
        min_score = settings.get('min_score', 50)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        
        if signals.get('score', 0) < min_score:
            return False, {**signals, 'reason': f'Score too low: {signals.get("score", 0)} < {min_score}'}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥
        if signals.get('trend') == "BEARISH":
            return False, {**signals, 'reason': 'Bearish trend'}
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if CURRENT_MODE == "CONSERVATIVE":
            if not signals.get('adx_strong', False):
                return False, {**signals, 'reason': 'Weak trend in conservative mode'}
                
        return True, signals
        
    except Exception as e:
        logger.error(f"Error checking swing entry for {symbol}: {e}")
        return False, {'error': str(e), 'reason': 'Check failed'}

def ensure_min_order_size(symbol: str, base_amount: float, current_price: float, available_usdt: float) -> Tuple[float, float]:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    min_order_value = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
    actual_usdt_amount = base_amount * current_price
    
    # –ï—Å–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if actual_usdt_amount < min_order_value:
        logger.warning(f"üîÑ Order size too small: {actual_usdt_amount:.2f} < {min_order_value}, increasing...")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        min_base_amount = min_order_value / current_price
        base_amount = round_amount(symbol, min_base_amount)
        actual_usdt_amount = base_amount * current_price
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if actual_usdt_amount > available_usdt:
            logger.error(f"‚ùå Cannot meet min order size: {actual_usdt_amount:.2f} > {available_usdt:.2f}")
            return 0, 0
    
    return base_amount, actual_usdt_amount

def open_swing_position(symbol: str, signals: Dict):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–≤–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        settings = get_current_settings()
        current_price = signals['price']
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –î–û–°–¢–£–ü–ù–û–ì–û USDT
        available_usdt = compute_available_usdt()
        usdt_amount = available_usdt * settings['trade_pct']
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
        min_order_value = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
        
        # –ï—Å–ª–∏ —Ä–∞—Å—á–µ—Ç–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é
        if usdt_amount < min_order_value:
            usdt_amount = min_order_value
            
        # –ù–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if usdt_amount > available_usdt:
            usdt_amount = available_usdt * 0.95  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            
        logger.info(f"üí∞ Available USDT: {available_usdt:.2f}, Order size: {usdt_amount:.2f}")
        
        # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        base_amount = usdt_amount / current_price
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        base_amount = round_amount(symbol, base_amount)
        
        if base_amount <= 0:
            logger.error(f"Invalid amount for {symbol}: {base_amount}")
            return False
            
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        actual_usdt_amount = base_amount * current_price
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Å—É–º–º–∞ —Å—Ç–∞–ª–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if actual_usdt_amount < min_order_value:
            logger.warning(f"üîÑ Amount too small after rounding: {actual_usdt_amount:.2f}, increasing...")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            min_base_amount = min_order_value / current_price
            base_amount = round_amount(symbol, min_base_amount)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
            actual_usdt_amount = base_amount * current_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if actual_usdt_amount > available_usdt:
                logger.error(f"‚ùå Even min amount too expensive: {actual_usdt_amount:.2f} > {available_usdt:.2f}")
                return False
        
        logger.info(f"üìä Final calculation: {base_amount:.6f} {symbol} = {actual_usdt_amount:.2f} USDT")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
        if actual_usdt_amount < min_order_value - 0.01:
            logger.error(f"‚ùå Final order value too small: {actual_usdt_amount:.2f} USDT < {min_order_value} USDT")
            return False
            
        # –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        # –†–∞—Å—á–µ—Ç TP/SL (—Ç–æ–ª—å–∫–æ LONG –¥–ª—è —Å–≤–∏–Ω–≥–∞)
        stop_loss = current_price * (1 - settings['max_stop_loss'])
        take_profit = current_price * (1 + settings['take_profit'])
        
        if DRY_RUN:
            logger.info(f"DRY RUN: Would open {symbol} - {base_amount:.6f} @ {current_price:.6f}")
            record_open_position(symbol, base_amount, current_price, stop_loss, take_profit, "")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        bal = fetch_balance()
        usdt_free = float(bal['free'].get('USDT', 0) or 0)
        
        if usdt_free < actual_usdt_amount:
            logger.info(f"Insufficient USDT for {symbol}: {usdt_free:.2f} < {actual_usdt_amount:.2f}")
            return False
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        market = exchange.market(symbol)
        min_amount = float(market['limits']['amount']['min'])
        
        if base_amount < min_amount:
            logger.error(f"‚ùå Amount too small: {base_amount:.6f} < {min_amount}")
            # –ü—Ä–æ–±—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            base_amount = min_amount
            actual_usdt_amount = base_amount * current_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤–∞—è —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if actual_usdt_amount > available_usdt:
                logger.error(f"‚ùå Even min amount too expensive: {actual_usdt_amount:.2f} > {available_usdt:.2f}")
                return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è Bybit
        logger.info(f"üü¢ Opening SWING position: {symbol} {base_amount:.6f} @ {current_price:.6f}")
        
        try:
            order = exchange.create_market_order(symbol, 'buy', base_amount)
            
            logger.info(f"üì¶ Order response: {order}")
            
            if order and order.get('id'):
                order_id = order['id']
                logger.info(f"üìã Order ID: {order_id}")
                
                time.sleep(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                new_bal = fetch_balance()
                base_currency = symbol.split('/')[0]
                new_base_balance = float(new_bal['free'].get(base_currency, 0) or 0)
                old_base_balance = float(bal['free'].get(base_currency, 0) or 0)
                
                logger.info(f"üí∞ Balance check - Before: {old_base_balance:.6f}, After: {new_base_balance:.6f}")
                
                if new_base_balance > old_base_balance + 0.000001:
                    filled_amount = new_base_balance - old_base_balance
                    
                    try:
                        order_status = exchange.fetch_order(order_id, symbol, params={'acknowledged': True})
                        average_price = float(order_status.get('average', current_price))
                        logger.info(f"‚úÖ Order executed - Amount: {filled_amount:.6f}, Avg Price: {average_price:.6f}")
                    except:
                        average_price = current_price
                        logger.info(f"‚úÖ Order executed (fallback) - Amount: {filled_amount:.6f}, Price: {average_price:.6f}")
                    
                    record_open_position(symbol, filled_amount, average_price, stop_loss, take_profit, "")
                    update_daily_trade_count(symbol)
                    
                    safe_send(
                        f"üìà <b>SWING ENTRY: {symbol}</b>\n"
                        f"–†–µ–∂–∏–º: {TRADING_MODES[CURRENT_MODE]['name']}\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {filled_amount:.6f}\n"
                        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {average_price:.6f}\n"
                        f"–°—É–º–º–∞: {filled_amount * average_price:.2f} USDT\n"
                        f"Stop Loss: {stop_loss:.6f}\n"
                        f"Take Profit: {take_profit:.6f}\n"
                        f"Score: {signals.get('score', 0)}"
                    )
                    
                    logger.info(f"‚úÖ Swing position opened: {symbol} {filled_amount:.6f} @ {average_price:.6f}")
                    return True
                else:
                    logger.error(f"‚ùå Order not executed - balance unchanged")
                    try:
                        exchange.cancel_order(order_id, symbol)
                        logger.info(f"üìù Order {order_id} cancelled")
                    except:
                        pass
                    return False
            else:
                logger.error(f"‚ùå Order creation failed: {order}")
                return False
                
        except ccxt.InsufficientFunds as e:
            logger.error(f"Insufficient funds for {symbol}: {e}")
            return False
        except ccxt.InvalidOrder as e:
            logger.error(f"Invalid order for {symbol}: {e}")
            return False
        except ccxt.ExchangeError as e:
            logger.error(f"Exchange error for {symbol}: {e}")
            return False
            
    except Exception as e:
        logger.error(f"Error opening swing position for {symbol}: {e}")
        safe_send(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–≤–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {str(e)}")
        return False

# ====== SCALPING LOGIC ======
def get_scalping_signals(symbol: str) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    strategy_config = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
    
    try:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
        df_entry = get_ohlcv_data(symbol, strategy_config['timeframe_entry'], 50)
        if df_entry is None:
            return {'score': 0, 'error': 'No entry data'}
            
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
        df_trend = get_ohlcv_data(symbol, strategy_config['timeframe_trend'], 30)
        if df_trend is None:
            return {'score': 0, 'error': 'No trend data'}
            
        current_price = df_entry['close'].iloc[-1]
        current_volume = df_entry['volume'].iloc[-1]
        volume_sma = df_entry['volume'].tail(20).mean()
        volume_ratio = current_volume / volume_sma if volume_sma > 0 else 1
        volume_ok = volume_ratio >= strategy_config['volume_multiplier']
        
        # RSI
        rsi = RSIIndicator(df_entry['close'], window=14).rsi().iloc[-1]
        rsi_range = strategy_config['rsi_range']
        rsi_ok = rsi_range[0] <= rsi <= rsi_range[1]
        
        signals = {
            'price': current_price,
            'volume_ratio': volume_ratio,
            'volume_ok': volume_ok,
            'rsi_value': rsi,
            'rsi_ok': rsi_ok,
            'score': 0,
            'strategy': CURRENT_SCALPING_STRATEGY
        }

        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è Bollinger Squeeze
        if CURRENT_SCALPING_STRATEGY == "BB_SQUEEZE":
            bb_period = strategy_config['bb_period']
            bb_std = strategy_config['bb_std']
            
            bb = BollingerBands(df_entry['close'], window=bb_period, window_dev=bb_std)
            bb_upper = bb.bollinger_hband().iloc[-1]
            bb_lower = bb.bollinger_lband().iloc[-1]
            bb_middle = bb.bollinger_mavg().iloc[-1]
            
            bb_width = (bb_upper - bb_lower) / bb_middle
            typical_width = 0.02  # 2% —Ç–∏–ø–∏—á–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            
            squeeze_ended = bb_width > typical_width and bb_width > (bb_upper - bb_lower) / bb_middle
            
            signals.update({
                'bb_upper': bb_upper,
                'bb_lower': bb_lower,
                'bb_middle': bb_middle,
                'bb_width': bb_width,
                'squeeze_ended': squeeze_ended,
                'price_above_middle': current_price > bb_middle,
                'price_below_middle': current_price < bb_middle
            })
            
            # Scoring –¥–ª—è BB Squeeze
            score = 0
            if squeeze_ended and volume_ok:
                score += 40
            if rsi_ok:
                score += 30
            if volume_ok:
                score += 30
                
            signals['score'] = score
            
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è EMA Momentum
        elif CURRENT_SCALPING_STRATEGY == "EMA_MOMENTUM":
            ema_fast = EMAIndicator(df_entry['close'], window=strategy_config['ema_fast']).ema_indicator()
            ema_slow = EMAIndicator(df_entry['close'], window=strategy_config['ema_slow']).ema_indicator()
            
            ema_fast_current = ema_fast.iloc[-1]
            ema_slow_current = ema_slow.iloc[-1]
            ema_fast_prev = ema_fast.iloc[-2] if len(ema_fast) > 1 else ema_fast_current
            ema_slow_prev = ema_slow.iloc[-2] if len(ema_slow) > 1 else ema_slow_current
            
            ema_bullish = ema_fast_current > ema_slow_current and ema_fast_current > ema_fast_prev
            ema_bearish = ema_fast_current < ema_slow_current and ema_fast_current < ema_fast_prev
            
            signals.update({
                'ema_fast': ema_fast_current,
                'ema_slow': ema_slow_current,
                'ema_bullish': ema_bullish,
                'ema_bearish': ema_bearish,
                'ema_cross': (ema_fast_prev <= ema_slow_prev and ema_fast_current > ema_slow_current) or 
                            (ema_fast_prev >= ema_slow_prev and ema_fast_current < ema_slow_current)
            })
            
            # Scoring –¥–ª—è EMA Momentum
            score = 0
            if ema_bullish and volume_ok:
                score += 50
            elif ema_bearish and volume_ok:
                score += 40
            if rsi_ok:
                score += 30
            if signals['ema_cross']:
                score += 20
                
            signals['score'] = score
            
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è VWAP Bounce
        elif CURRENT_SCALPING_STRATEGY == "VWAP_BOUNCE":
            vwap_period = strategy_config['vwap_period']
            vwap = VolumeWeightedAveragePrice(df_entry['high'], df_entry['low'], df_entry['close'], df_entry['volume'], window=vwap_period).volume_weighted_average_price()
            vwap_current = vwap.iloc[-1]
            
            price_vwap_ratio = (current_price - vwap_current) / vwap_current
            bounce_threshold = 0.001  # 0.1%
            
            signals.update({
                'vwap': vwap_current,
                'price_above_vwap': current_price > vwap_current,
                'price_below_vwap': current_price < vwap_current,
                'vwap_distance': abs(price_vwap_ratio),
                'near_vwap': abs(price_vwap_ratio) <= bounce_threshold
            })
            
            # Scoring –¥–ª—è VWAP Bounce
            score = 0
            if signals['near_vwap'] and volume_ok:
                score += 60
            if rsi_ok:
                score += 30
            if volume_ok:
                score += 20
                
            signals['score'] = score
            
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è Breakout
        elif CURRENT_SCALPING_STRATEGY == "BREAKOUT":
            breakout_period = strategy_config['breakout_period']
            high_breakout = df_entry['high'].tail(breakout_period).max()
            low_breakout = df_entry['low'].tail(breakout_period).min()
            range_size = (high_breakout - low_breakout) / low_breakout
            
            breaking_high = current_price >= high_breakout
            breaking_low = current_price <= low_breakout
            
            signals.update({
                'breakout_high': high_breakout,
                'breakout_low': low_breakout,
                'range_size': range_size,
                'breaking_high': breaking_high,
                'breaking_low': breaking_low,
                'consolidation': range_size < 0.01  # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –º–µ–Ω–µ–µ 1%
            })
            
            # Scoring –¥–ª—è Breakout
            score = 0
            if (breaking_high or breaking_low) and volume_ok:
                score += 70
            if signals['consolidation']:
                score += 20
            if rsi_ok:
                score += 20
                
            signals['score'] = score
            
        return signals
        
    except Exception as e:
        logger.error(f"Error calculating scalping signals for {symbol}: {e}")
        return {'score': 0, 'error': str(e)}

def get_scalping_signal(symbol: str) -> Tuple[bool, Dict]:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    try:
        if not can_open_new_trade():
            return False, {'reason': 'Max trades reached'}
            
        if not check_scalping_daily_limits():
            return False, {'reason': 'Daily limits reached'}
            
        if is_in_cooldown(symbol):
            return False, {'reason': 'Cooldown active'}
            
        if not check_daily_trade_limit(symbol):
            return False, {'reason': 'Daily trade limit reached'}
            
        signals = get_scalping_signals(symbol)
        
        if signals['score'] < 70:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            return False, signals
            
        return True, signals
        
    except Exception as e:
        logger.error(f"Error checking scalping signal for {symbol}: {e}")
        return False, {'error': str(e)}

def open_scalping_position(symbol: str, signals: Dict):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∫–∞–ª—å–ø–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è Bybit"""
    if CURRENT_MODE != "SCALPING":
        logger.error(f"‚ùå Trying to open scalping position in {CURRENT_MODE} mode")
        return False

    try:
        strategy_config = SCALPING_STRATEGIES[CURRENT_SCALPING_STRATEGY]
        current_price = signals['price']
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –î–û–°–¢–£–ü–ù–û–ì–û USDT
        available_usdt = compute_available_usdt()
        usdt_amount = available_usdt * strategy_config['trade_pct']
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
        min_order_value = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
        
        # –ï—Å–ª–∏ —Ä–∞—Å—á–µ—Ç–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é
        if usdt_amount < min_order_value:
            usdt_amount = min_order_value
            
        # –ù–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if usdt_amount > available_usdt:
            usdt_amount = available_usdt * 0.95  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            
        logger.info(f"üí∞ Available USDT: {available_usdt:.2f}, Order size: {usdt_amount:.2f}")
        
        # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        base_amount = usdt_amount / current_price
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        base_amount = round_amount(symbol, base_amount)
        
        if base_amount <= 0:
            logger.error(f"Invalid amount for {symbol}: {base_amount}")
            return False
            
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        actual_usdt_amount = base_amount * current_price
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Å—É–º–º–∞ —Å—Ç–∞–ª–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if actual_usdt_amount < min_order_value:
            logger.warning(f"üîÑ Amount too small after rounding: {actual_usdt_amount:.2f}, increasing...")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            min_base_amount = min_order_value / current_price
            base_amount = round_amount(symbol, min_base_amount)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
            actual_usdt_amount = base_amount * current_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if actual_usdt_amount > available_usdt:
                logger.error(f"‚ùå Even min amount too expensive: {actual_usdt_amount:.2f} > {available_usdt:.2f}")
                return False
        
        logger.info(f"üìä Final calculation: {base_amount:.6f} {symbol} = {actual_usdt_amount:.2f} USDT")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
        if actual_usdt_amount < min_order_value - 0.01:
            logger.error(f"‚ùå Final order value too small: {actual_usdt_amount:.2f} USDT < {min_order_value} USDT")
            return False
            
        # –†–∞—Å—á–µ—Ç TP/SL
        if CURRENT_SCALPING_STRATEGY in ["BB_SQUEEZE", "EMA_MOMENTUM", "BREAKOUT"]:
            # LONG –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç—Ç–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            stop_loss = current_price * (1 - strategy_config['max_stop_loss'])
            take_profit = current_price * (1 + strategy_config['take_profit'])
        else:
            # VWAP Bounce –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            if signals.get('price_below_vwap', False):
                # LONG –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ VWAP
                stop_loss = current_price * (1 - strategy_config['max_stop_loss'])
                take_profit = current_price * (1 + strategy_config['take_profit'])
            else:
                # SHORT –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ VWAP
                stop_loss = current_price * (1 + strategy_config['max_stop_loss'])
                take_profit = current_price * (1 - strategy_config['take_profit'])
        
        if DRY_RUN:
            logger.info(f"DRY RUN: Would open {symbol} - {base_amount:.6f} @ {current_price:.6f}")
            record_open_position(symbol, base_amount, current_price, stop_loss, take_profit, CURRENT_SCALPING_STRATEGY)
            return True
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        bal = fetch_balance()
        usdt_free = float(bal['free'].get('USDT', 0) or 0)
        
        if usdt_free < actual_usdt_amount:
            logger.info(f"Insufficient USDT for {symbol}: {usdt_free:.2f} < {actual_usdt_amount:.2f}")
            return False
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        market = exchange.market(symbol)
        min_amount = float(market['limits']['amount']['min'])
        
        if base_amount < min_amount:
            logger.error(f"‚ùå Amount too small: {base_amount:.6f} < {min_amount}")
            # –ü—Ä–æ–±—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            base_amount = min_amount
            actual_usdt_amount = base_amount * current_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤–∞—è —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if actual_usdt_amount > available_usdt:
                logger.error(f"‚ùå Even min amount too expensive: {actual_usdt_amount:.2f} > {available_usdt:.2f}")
                return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è Bybit
        logger.info(f"üü¢ Opening SCALPING position: {symbol} {base_amount:.6f} @ {current_price:.6f}")
        
        try:
            order = exchange.create_market_order(symbol, 'buy', base_amount)
            
            logger.info(f"üì¶ Order response: {order}")
            
            if order and order.get('id'):
                order_id = order['id']
                logger.info(f"üìã Order ID: {order_id}")
                
                time.sleep(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                new_bal = fetch_balance()
                base_currency = symbol.split('/')[0]
                new_base_balance = float(new_bal['free'].get(base_currency, 0) or 0)
                old_base_balance = float(bal['free'].get(base_currency, 0) or 0)
                
                logger.info(f"üí∞ Balance check - Before: {old_base_balance:.6f}, After: {new_base_balance:.6f}")
                
                if new_base_balance > old_base_balance + 0.000001:
                    filled_amount = new_base_balance - old_base_balance
                    
                    try:
                        order_status = exchange.fetch_order(order_id, symbol, params={'acknowledged': True})
                        average_price = float(order_status.get('average', current_price))
                        logger.info(f"‚úÖ Order executed - Amount: {filled_amount:.6f}, Avg Price: {average_price:.6f}")
                    except:
                        average_price = current_price
                        logger.info(f"‚úÖ Order executed (fallback) - Amount: {filled_amount:.6f}, Price: {average_price:.6f}")
                    
                    record_open_position(symbol, filled_amount, average_price, stop_loss, take_profit, CURRENT_SCALPING_STRATEGY)
                    update_daily_trade_count(symbol)
                    
                    safe_send(
                        f"üéØ <b>SCALPING ENTRY: {symbol}</b>\n"
                        f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_config['name']}\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {filled_amount:.6f}\n"
                        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {average_price:.6f}\n"
                        f"–°—É–º–º–∞: {filled_amount * average_price:.2f} USDT\n"
                        f"Stop Loss: {stop_loss:.6f}\n"
                        f"Take Profit: {take_profit:.6f}\n"
                        f"Score: {signals.get('score', 0)}"
                    )
                    
                    logger.info(f"‚úÖ Scalping position opened: {symbol} {filled_amount:.6f} @ {average_price:.6f}")
                    return True
                else:
                    logger.error(f"‚ùå Order not executed - balance unchanged")
                    try:
                        exchange.cancel_order(order_id, symbol)
                        logger.info(f"üìù Order {order_id} cancelled")
                    except:
                        pass
                    return False
            else:
                logger.error(f"‚ùå Order creation failed: {order}")
                return False
                
        except ccxt.InsufficientFunds as e:
            logger.error(f"Insufficient funds for {symbol}: {e}")
            return False
        except ccxt.InvalidOrder as e:
            logger.error(f"Invalid order for {symbol}: {e}")
            return False
        except ccxt.ExchangeError as e:
            logger.error(f"Exchange error for {symbol}: {e}")
            return False
            
    except Exception as e:
        logger.error(f"Error opening scalping position for {symbol}: {e}")
        safe_send(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {str(e)}")
        return False

def check_market_limits(symbol: str, amount: float, cost: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –æ—Ä–¥–µ—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è Bybit"""
    try:
        market = exchange.market(symbol)
        
        # –î–ª—è Bybit spot –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        min_amount = float(market['limits']['amount']['min'])
        
        # Bybit –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MIN_USDT_PER_SYMBOL –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
        min_cost = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –±–∏—Ä–∂–∏, –Ω–æ –Ω–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –Ω–∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é
        exchange_min_cost = float(market['limits']['cost'].get('min', 0))
        if exchange_min_cost > 0 and exchange_min_cost > min_cost:
            min_cost = exchange_min_cost
        
        logger.info(f"üìè Market limits for {symbol}: min_amount={min_amount}, our_min_cost={min_cost}")
        logger.info(f"üìä Order details: amount={amount:.6f}, cost={cost:.2f} USDT")
        
        if amount < min_amount:
            logger.error(f"‚ùå Amount too small: {amount:.6f} < {min_amount}")
            return False
            
        if cost < min_cost:
            logger.error(f"‚ùå Cost too small: {cost:.2f} USDT < {min_cost} USDT")
            return False
            
        logger.info(f"‚úÖ Market limits check passed for {symbol}")
        return True
        
    except Exception as e:
        logger.error(f"Error checking market limits for {symbol}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        min_cost = MIN_USDT_PER_SYMBOL.get(symbol, MIN_TRADE_USDT)
        if cost < min_cost:
            logger.error(f"‚ùå Cost too small (fallback): {cost:.2f} USDT < {min_cost} USDT")
            return False
        return True

# ====== SYMBOL MANAGEMENT ======
def get_available_symbols() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ"""
    try:
        markets = exchange.load_markets()
        available_symbols = []
        
        for symbol in SYMBOLS:
            if symbol in markets:
                market = markets[symbol]
                if market.get('active', False) and market.get('spot', False):
                    available_symbols.append(symbol)
            else:
                logger.warning(f"Symbol {symbol} not available on exchange")
        
        logger.info(f"Available symbols: {available_symbols}")
        return available_symbols
        
    except Exception as e:
        logger.error(f"Error loading available symbols: {e}")
        return SYMBOLS  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
active_symbols = get_available_symbols()

# ====== MAIN TRADING LOOP ======
def scan_for_opportunities():
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"""
    logger.info(f"üîç Scanning opportunities in {CURRENT_MODE} mode...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
    available_usdt = compute_available_usdt()
    if available_usdt < 5.0:  # –ú–∏–Ω–∏–º—É–º 5 USDT –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        logger.warning(f"‚ö†Ô∏è Skipping opportunities - insufficient USDT: {available_usdt:.2f}")
        return
        
    opportunities = []
    
    logger.info(f"üí∞ Available USDT: {available_usdt:.2f}")
    
    for symbol in active_symbols:
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
            if is_in_cooldown(symbol):
                logger.debug(f"Skipping {symbol} - in cooldown")
                continue
                
            if CURRENT_MODE == "SCALPING":
                should_enter, signals = get_scalping_signal(symbol)
            else:
                should_enter, signals = should_enter_swing_position(symbol)
                
            if should_enter and isinstance(signals, dict) and signals.get('score', 0) > 0:
                opportunities.append((symbol, signals))
                logger.info(f"üéØ Found opportunity: {symbol} (Score: {signals.get('score', 0)})")
                
        except Exception as e:
            logger.error(f"Error scanning {symbol}: {e}")
            continue
            
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ª—É—á—à–∏–µ (–º–∞–∫—Å–∏–º—É–º 1 –∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
    opportunities.sort(key=lambda x: x[1].get('score', 0), reverse=True)
    
    logger.info(f"üìä Found {len(opportunities)} opportunities, attempting to open top 1")
    
    for symbol, signals in opportunities[:1]:  # –¢–æ–ª—å–∫–æ 1 –ø–æ–∑–∏—Ü–∏—è –∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            if CURRENT_MODE == "SCALPING":
                success = open_scalping_position(symbol, signals)
            else:
                success = open_swing_position(symbol, signals)
                
            if success:
                logger.info(f"‚úÖ Successfully opened position for {symbol}")
                break  # –¢–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            else:
                logger.warning(f"‚ùå Failed to open position for {symbol}")
                
        except Exception as e:
            logger.error(f"Error opening position for {symbol}: {e}")
            continue

def main_trading_loop():
    """–ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    logger.info("ü§ñ Starting Universal Trading Bot...")
    safe_send(f"üöÄ <b>UNIVERSAL TRADING BOT STARTED</b>\n–†–µ–∂–∏–º: {TRADING_MODES[CURRENT_MODE]['name']}")
    
    last_status_time = 0
    last_cleanup_time = 0
    settings = get_current_settings()
    
    while True:
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π
            check_position_exits()
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
            if current_time - last_cleanup_time >= 1800:  # 30 –º–∏–Ω—É—Ç
                logger.info("üîÑ Periodic cleanup check...")
                close_unprofitable_positions()
                last_cleanup_time = current_time
            
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞)
            available_usdt = compute_available_usdt()
            if available_usdt >= 10.0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 10 USDT
                scan_for_opportunities()
            else:
                logger.warning(f"‚ö†Ô∏è Skipping scan - insufficient USDT: {available_usdt:.2f}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
            if current_time - last_status_time >= settings.get('status_interval', 600):
                cmd_status(None, None)
                last_status_time = current_time
                
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            time.sleep(settings.get('scan_interval', 60))
            
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
            break
        except Exception as e:
            logger.error(f"Main loop error: {e}")
            time.sleep(30)

# ====== TELEGRAM SETUP ======
def setup_telegram():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞"""
    try:
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dp = updater.dispatcher
        
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("status", cmd_status))
        dp.add_handler(CommandHandler("stats", cmd_stats))
        dp.add_handler(CommandHandler("close", cmd_close))        
        dp.add_handler(CommandHandler("close_all", cmd_close_all))
        dp.add_handler(CommandHandler("close_unprofitable", cmd_close_unprofitable))
        dp.add_handler(CommandHandler("sync", cmd_force_sync))
        dp.add_handler(CommandHandler("import", cmd_import))
        dp.add_handler(CommandHandler("debug", cmd_debug_settings))
        dp.add_handler(CommandHandler("cleanup", cmd_cleanup_duplicates))
        
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        
        return updater
    except Exception as e:
        logger.error(f"Telegram setup failed: {e}")
        return None

# ====== CLEANUP ======
def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        if os.path.exists(LOCK_FILE):
            os.remove(LOCK_FILE)
        db.close()
        logger.info("Cleanup completed")
    except Exception as e:
        logger.error(f"Cleanup error: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"Received signal {signum}, shutting down...")
    cleanup()
    sys.exit(0)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_duplicate_positions()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        auto_sync_positions()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        active_symbols = get_available_symbols()
        logger.info(f"Trading with {len(active_symbols)} available symbols")
        
        # –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        imported = import_existing_positions()
        if imported > 0:
            logger.info(f"Imported {imported} existing positions")
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        updater = setup_telegram()
        if updater:
            updater.start_polling()
            logger.info("Telegram bot started")
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        main_trading_loop()
        
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        safe_send(f"‚ùå <b>BOT CRASHED:</b> {str(e)}")
    finally:
        cleanup()
